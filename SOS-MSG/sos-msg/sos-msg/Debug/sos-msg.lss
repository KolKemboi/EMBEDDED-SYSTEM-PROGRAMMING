
sos-msg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000570  000005e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c2  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f0  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b3  00000000  00000000  00001d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  7a:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <onled>:
		showmsg(S_char);
		_delay_ms(MSG_END);	
    }
}

void onled(int time){
  82:	8f 92       	push	r8
  84:	9f 92       	push	r9
  86:	af 92       	push	r10
  88:	bf 92       	push	r11
  8a:	cf 92       	push	r12
  8c:	df 92       	push	r13
  8e:	ef 92       	push	r14
  90:	ff 92       	push	r15
  92:	bc 01       	movw	r22, r24
	PORTB = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	88 bb       	out	0x18, r24	; 24
	_delay_ms(time);
  98:	07 2e       	mov	r0, r23
  9a:	00 0c       	add	r0, r0
  9c:	88 0b       	sbc	r24, r24
  9e:	99 0b       	sbc	r25, r25
  a0:	0e 94 94 01 	call	0x328	; 0x328 <__floatsisf>
  a4:	4b 01       	movw	r8, r22
  a6:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	4a ef       	ldi	r20, 0xFA	; 250
  ae:	54 e4       	ldi	r21, 0x44	; 68
  b0:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
  b4:	6b 01       	movw	r12, r22
  b6:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e8       	ldi	r20, 0x80	; 128
  be:	5f e3       	ldi	r21, 0x3F	; 63
  c0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__cmpsf2>
  c4:	88 23       	and	r24, r24
  c6:	24 f1       	brlt	.+72     	; 0x110 <onled+0x8e>
		__ticks = 1;
	else if (__tmp > 65535)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	3f ef       	ldi	r19, 0xFF	; 255
  cc:	4f e7       	ldi	r20, 0x7F	; 127
  ce:	57 e4       	ldi	r21, 0x47	; 71
  d0:	c7 01       	movw	r24, r14
  d2:	b6 01       	movw	r22, r12
  d4:	0e 94 1c 02 	call	0x438	; 0x438 <__gesf2>
  d8:	18 16       	cp	r1, r24
  da:	ac f4       	brge	.+42     	; 0x106 <onled+0x84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	40 e2       	ldi	r20, 0x20	; 32
  e2:	51 e4       	ldi	r21, 0x41	; 65
  e4:	c5 01       	movw	r24, r10
  e6:	b4 01       	movw	r22, r8
  e8:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
  ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fixunssfsi>
  f0:	06 c0       	rjmp	.+12     	; 0xfe <onled+0x7c>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <onled+0x74>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	61 50       	subi	r22, 0x01	; 1
  fc:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	61 15       	cp	r22, r1
 100:	71 05       	cpc	r23, r1
 102:	b9 f7       	brne	.-18     	; 0xf2 <onled+0x70>
 104:	0a c0       	rjmp	.+20     	; 0x11a <onled+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 106:	c7 01       	movw	r24, r14
 108:	b6 01       	movw	r22, r12
 10a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fixunssfsi>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <onled+0x92>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	cb 01       	movw	r24, r22
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <onled+0x94>
}
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	bf 90       	pop	r11
 124:	af 90       	pop	r10
 126:	9f 90       	pop	r9
 128:	8f 90       	pop	r8
 12a:	08 95       	ret

0000012c <offled>:


void offled(int time){
 12c:	8f 92       	push	r8
 12e:	9f 92       	push	r9
 130:	af 92       	push	r10
 132:	bf 92       	push	r11
 134:	cf 92       	push	r12
 136:	df 92       	push	r13
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
	PORTB = 0x00;
 13c:	18 ba       	out	0x18, r1	; 24
	_delay_ms(time);
 13e:	bc 01       	movw	r22, r24
 140:	99 0f       	add	r25, r25
 142:	88 0b       	sbc	r24, r24
 144:	99 0b       	sbc	r25, r25
 146:	0e 94 94 01 	call	0x328	; 0x328 <__floatsisf>
 14a:	4b 01       	movw	r8, r22
 14c:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	4a ef       	ldi	r20, 0xFA	; 250
 154:	54 e4       	ldi	r21, 0x44	; 68
 156:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 15a:	6b 01       	movw	r12, r22
 15c:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5f e3       	ldi	r21, 0x3F	; 63
 166:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__cmpsf2>
 16a:	88 23       	and	r24, r24
 16c:	24 f1       	brlt	.+72     	; 0x1b6 <offled+0x8a>
		__ticks = 1;
	else if (__tmp > 65535)
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	3f ef       	ldi	r19, 0xFF	; 255
 172:	4f e7       	ldi	r20, 0x7F	; 127
 174:	57 e4       	ldi	r21, 0x47	; 71
 176:	c7 01       	movw	r24, r14
 178:	b6 01       	movw	r22, r12
 17a:	0e 94 1c 02 	call	0x438	; 0x438 <__gesf2>
 17e:	18 16       	cp	r1, r24
 180:	ac f4       	brge	.+42     	; 0x1ac <offled+0x80>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	40 e2       	ldi	r20, 0x20	; 32
 188:	51 e4       	ldi	r21, 0x41	; 65
 18a:	c5 01       	movw	r24, r10
 18c:	b4 01       	movw	r22, r8
 18e:	0e 94 21 02 	call	0x442	; 0x442 <__mulsf3>
 192:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fixunssfsi>
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <offled+0x78>
 198:	88 ec       	ldi	r24, 0xC8	; 200
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <offled+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a0:	61 50       	subi	r22, 0x01	; 1
 1a2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a4:	61 15       	cp	r22, r1
 1a6:	71 05       	cpc	r23, r1
 1a8:	b9 f7       	brne	.-18     	; 0x198 <offled+0x6c>
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <offled+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__fixunssfsi>
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <offled+0x8e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	cb 01       	movw	r24, r22
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <offled+0x90>
}
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	bf 90       	pop	r11
 1ca:	af 90       	pop	r10
 1cc:	9f 90       	pop	r9
 1ce:	8f 90       	pop	r8
 1d0:	08 95       	ret

000001d2 <showmsg>:

void showmsg(int array[5]){
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 01       	movw	r16, r24
	for (int i = 0; i < 6; i++)
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	1c c0       	rjmp	.+56     	; 0x21a <showmsg+0x48>
	{
		if (i%2==0)
 1e2:	ce 01       	movw	r24, r28
 1e4:	9e 01       	movw	r18, r28
 1e6:	21 70       	andi	r18, 0x01	; 1
 1e8:	33 27       	eor	r19, r19
 1ea:	c0 fd       	sbrc	r28, 0
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <showmsg+0x30>
		{
			onled(array[i]);
 1ee:	fe 01       	movw	r30, r28
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e0 0f       	add	r30, r16
 1f6:	f1 1f       	adc	r31, r17
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <onled>
 200:	0b c0       	rjmp	.+22     	; 0x218 <showmsg+0x46>
		}
		else if (i%2!=0)
 202:	23 2b       	or	r18, r19
 204:	49 f0       	breq	.+18     	; 0x218 <showmsg+0x46>
		{
			offled(array[i]);
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	f8 01       	movw	r30, r16
 20c:	e8 0f       	add	r30, r24
 20e:	f9 1f       	adc	r31, r25
 210:	80 81       	ld	r24, Z
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	0e 94 96 00 	call	0x12c	; 0x12c <offled>
	PORTB = 0x00;
	_delay_ms(time);
}

void showmsg(int array[5]){
	for (int i = 0; i < 6; i++)
 218:	21 96       	adiw	r28, 0x01	; 1
 21a:	c6 30       	cpi	r28, 0x06	; 6
 21c:	d1 05       	cpc	r29, r1
 21e:	0c f3       	brlt	.-62     	; 0x1e2 <showmsg+0x10>
		else if (i%2!=0)
		{
			offled(array[i]);
		}
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <main>:
void showmsg(int array[5]);
void onled(int time);
void offled(int time);

int main(void)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	64 97       	sbiw	r28, 0x14	; 20
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
	int S_char[5] = {100, 100, 100, 100, 100};
 23e:	8a e0       	ldi	r24, 0x0A	; 10
 240:	e0 e6       	ldi	r30, 0x60	; 96
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	de 01       	movw	r26, r28
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x1e>
	int O_char[5] = {250, 100, 250, 100, 250};
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	ea e6       	ldi	r30, 0x6A	; 106
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	de 01       	movw	r26, r28
 258:	1b 96       	adiw	r26, 0x0b	; 11
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	8a 95       	dec	r24
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x30>
		
	DDRB = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
    while (1) 
    {
		showmsg(S_char);
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <showmsg>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	97 e2       	ldi	r25, 0x27	; 39
 272:	05 c0       	rjmp	.+10     	; 0x27e <main+0x54>
 274:	e8 ec       	ldi	r30, 0xC8	; 200
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	31 97       	sbiw	r30, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x4e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27e:	00 97       	sbiw	r24, 0x00	; 0
 280:	c9 f7       	brne	.-14     	; 0x274 <main+0x4a>
		_delay_ms(CHAR_END);
		showmsg(O_char);
 282:	ce 01       	movw	r24, r28
 284:	0b 96       	adiw	r24, 0x0b	; 11
 286:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <showmsg>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	97 e2       	ldi	r25, 0x27	; 39
 28e:	05 c0       	rjmp	.+10     	; 0x29a <main+0x70>
 290:	e8 ec       	ldi	r30, 0xC8	; 200
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x6a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	c9 f7       	brne	.-14     	; 0x290 <main+0x66>
		_delay_ms(CHAR_END);
		showmsg(S_char);
 29e:	ce 01       	movw	r24, r28
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <showmsg>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2a6:	80 e2       	ldi	r24, 0x20	; 32
 2a8:	9e e4       	ldi	r25, 0x4E	; 78
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <main+0x8c>
 2ac:	e8 ec       	ldi	r30, 0xC8	; 200
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <main+0x86>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	c9 f7       	brne	.-14     	; 0x2ac <main+0x82>
 2ba:	d5 cf       	rjmp	.-86     	; 0x266 <main+0x3c>

000002bc <__cmpsf2>:
 2bc:	0e 94 cf 01 	call	0x39e	; 0x39e <__fp_cmp>
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <__cmpsf2+0x8>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret

000002c6 <__fixunssfsi>:
 2c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_splitA>
 2ca:	88 f0       	brcs	.+34     	; 0x2ee <__fixunssfsi+0x28>
 2cc:	9f 57       	subi	r25, 0x7F	; 127
 2ce:	98 f0       	brcs	.+38     	; 0x2f6 <__fixunssfsi+0x30>
 2d0:	b9 2f       	mov	r27, r25
 2d2:	99 27       	eor	r25, r25
 2d4:	b7 51       	subi	r27, 0x17	; 23
 2d6:	b0 f0       	brcs	.+44     	; 0x304 <__fixunssfsi+0x3e>
 2d8:	e1 f0       	breq	.+56     	; 0x312 <__fixunssfsi+0x4c>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	1a f0       	brmi	.+6      	; 0x2ea <__fixunssfsi+0x24>
 2e4:	ba 95       	dec	r27
 2e6:	c9 f7       	brne	.-14     	; 0x2da <__fixunssfsi+0x14>
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <__fixunssfsi+0x4c>
 2ea:	b1 30       	cpi	r27, 0x01	; 1
 2ec:	91 f0       	breq	.+36     	; 0x312 <__fixunssfsi+0x4c>
 2ee:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_zero>
 2f2:	b1 e0       	ldi	r27, 0x01	; 1
 2f4:	08 95       	ret
 2f6:	0c 94 15 02 	jmp	0x42a	; 0x42a <__fp_zero>
 2fa:	67 2f       	mov	r22, r23
 2fc:	78 2f       	mov	r23, r24
 2fe:	88 27       	eor	r24, r24
 300:	b8 5f       	subi	r27, 0xF8	; 248
 302:	39 f0       	breq	.+14     	; 0x312 <__fixunssfsi+0x4c>
 304:	b9 3f       	cpi	r27, 0xF9	; 249
 306:	cc f3       	brlt	.-14     	; 0x2fa <__fixunssfsi+0x34>
 308:	86 95       	lsr	r24
 30a:	77 95       	ror	r23
 30c:	67 95       	ror	r22
 30e:	b3 95       	inc	r27
 310:	d9 f7       	brne	.-10     	; 0x308 <__fixunssfsi+0x42>
 312:	3e f4       	brtc	.+14     	; 0x322 <__fixunssfsi+0x5c>
 314:	90 95       	com	r25
 316:	80 95       	com	r24
 318:	70 95       	com	r23
 31a:	61 95       	neg	r22
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
 31e:	8f 4f       	sbci	r24, 0xFF	; 255
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	08 95       	ret

00000324 <__floatunsisf>:
 324:	e8 94       	clt
 326:	09 c0       	rjmp	.+18     	; 0x33a <__floatsisf+0x12>

00000328 <__floatsisf>:
 328:	97 fb       	bst	r25, 7
 32a:	3e f4       	brtc	.+14     	; 0x33a <__floatsisf+0x12>
 32c:	90 95       	com	r25
 32e:	80 95       	com	r24
 330:	70 95       	com	r23
 332:	61 95       	neg	r22
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	99 23       	and	r25, r25
 33c:	a9 f0       	breq	.+42     	; 0x368 <__floatsisf+0x40>
 33e:	f9 2f       	mov	r31, r25
 340:	96 e9       	ldi	r25, 0x96	; 150
 342:	bb 27       	eor	r27, r27
 344:	93 95       	inc	r25
 346:	f6 95       	lsr	r31
 348:	87 95       	ror	r24
 34a:	77 95       	ror	r23
 34c:	67 95       	ror	r22
 34e:	b7 95       	ror	r27
 350:	f1 11       	cpse	r31, r1
 352:	f8 cf       	rjmp	.-16     	; 0x344 <__floatsisf+0x1c>
 354:	fa f4       	brpl	.+62     	; 0x394 <__floatsisf+0x6c>
 356:	bb 0f       	add	r27, r27
 358:	11 f4       	brne	.+4      	; 0x35e <__floatsisf+0x36>
 35a:	60 ff       	sbrs	r22, 0
 35c:	1b c0       	rjmp	.+54     	; 0x394 <__floatsisf+0x6c>
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	8f 4f       	sbci	r24, 0xFF	; 255
 364:	9f 4f       	sbci	r25, 0xFF	; 255
 366:	16 c0       	rjmp	.+44     	; 0x394 <__floatsisf+0x6c>
 368:	88 23       	and	r24, r24
 36a:	11 f0       	breq	.+4      	; 0x370 <__floatsisf+0x48>
 36c:	96 e9       	ldi	r25, 0x96	; 150
 36e:	11 c0       	rjmp	.+34     	; 0x392 <__floatsisf+0x6a>
 370:	77 23       	and	r23, r23
 372:	21 f0       	breq	.+8      	; 0x37c <__floatsisf+0x54>
 374:	9e e8       	ldi	r25, 0x8E	; 142
 376:	87 2f       	mov	r24, r23
 378:	76 2f       	mov	r23, r22
 37a:	05 c0       	rjmp	.+10     	; 0x386 <__floatsisf+0x5e>
 37c:	66 23       	and	r22, r22
 37e:	71 f0       	breq	.+28     	; 0x39c <__floatsisf+0x74>
 380:	96 e8       	ldi	r25, 0x86	; 134
 382:	86 2f       	mov	r24, r22
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	2a f0       	brmi	.+10     	; 0x394 <__floatsisf+0x6c>
 38a:	9a 95       	dec	r25
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	88 1f       	adc	r24, r24
 392:	da f7       	brpl	.-10     	; 0x38a <__floatsisf+0x62>
 394:	88 0f       	add	r24, r24
 396:	96 95       	lsr	r25
 398:	87 95       	ror	r24
 39a:	97 f9       	bld	r25, 7
 39c:	08 95       	ret

0000039e <__fp_cmp>:
 39e:	99 0f       	add	r25, r25
 3a0:	00 08       	sbc	r0, r0
 3a2:	55 0f       	add	r21, r21
 3a4:	aa 0b       	sbc	r26, r26
 3a6:	e0 e8       	ldi	r30, 0x80	; 128
 3a8:	fe ef       	ldi	r31, 0xFE	; 254
 3aa:	16 16       	cp	r1, r22
 3ac:	17 06       	cpc	r1, r23
 3ae:	e8 07       	cpc	r30, r24
 3b0:	f9 07       	cpc	r31, r25
 3b2:	c0 f0       	brcs	.+48     	; 0x3e4 <__fp_cmp+0x46>
 3b4:	12 16       	cp	r1, r18
 3b6:	13 06       	cpc	r1, r19
 3b8:	e4 07       	cpc	r30, r20
 3ba:	f5 07       	cpc	r31, r21
 3bc:	98 f0       	brcs	.+38     	; 0x3e4 <__fp_cmp+0x46>
 3be:	62 1b       	sub	r22, r18
 3c0:	73 0b       	sbc	r23, r19
 3c2:	84 0b       	sbc	r24, r20
 3c4:	95 0b       	sbc	r25, r21
 3c6:	39 f4       	brne	.+14     	; 0x3d6 <__fp_cmp+0x38>
 3c8:	0a 26       	eor	r0, r26
 3ca:	61 f0       	breq	.+24     	; 0x3e4 <__fp_cmp+0x46>
 3cc:	23 2b       	or	r18, r19
 3ce:	24 2b       	or	r18, r20
 3d0:	25 2b       	or	r18, r21
 3d2:	21 f4       	brne	.+8      	; 0x3dc <__fp_cmp+0x3e>
 3d4:	08 95       	ret
 3d6:	0a 26       	eor	r0, r26
 3d8:	09 f4       	brne	.+2      	; 0x3dc <__fp_cmp+0x3e>
 3da:	a1 40       	sbci	r26, 0x01	; 1
 3dc:	a6 95       	lsr	r26
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	81 1d       	adc	r24, r1
 3e2:	81 1d       	adc	r24, r1
 3e4:	08 95       	ret

000003e6 <__fp_split3>:
 3e6:	57 fd       	sbrc	r21, 7
 3e8:	90 58       	subi	r25, 0x80	; 128
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	59 f0       	breq	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	71 f0       	breq	.+28     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3f4:	47 95       	ror	r20

000003f6 <__fp_splitA>:
 3f6:	88 0f       	add	r24, r24
 3f8:	97 fb       	bst	r25, 7
 3fa:	99 1f       	adc	r25, r25
 3fc:	61 f0       	breq	.+24     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3fe:	9f 3f       	cpi	r25, 0xFF	; 255
 400:	79 f0       	breq	.+30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 402:	87 95       	ror	r24
 404:	08 95       	ret
 406:	12 16       	cp	r1, r18
 408:	13 06       	cpc	r1, r19
 40a:	14 06       	cpc	r1, r20
 40c:	55 1f       	adc	r21, r21
 40e:	f2 cf       	rjmp	.-28     	; 0x3f4 <__fp_split3+0xe>
 410:	46 95       	lsr	r20
 412:	f1 df       	rcall	.-30     	; 0x3f6 <__fp_splitA>
 414:	08 c0       	rjmp	.+16     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 416:	16 16       	cp	r1, r22
 418:	17 06       	cpc	r1, r23
 41a:	18 06       	cpc	r1, r24
 41c:	99 1f       	adc	r25, r25
 41e:	f1 cf       	rjmp	.-30     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 420:	86 95       	lsr	r24
 422:	71 05       	cpc	r23, r1
 424:	61 05       	cpc	r22, r1
 426:	08 94       	sec
 428:	08 95       	ret

0000042a <__fp_zero>:
 42a:	e8 94       	clt

0000042c <__fp_szero>:
 42c:	bb 27       	eor	r27, r27
 42e:	66 27       	eor	r22, r22
 430:	77 27       	eor	r23, r23
 432:	cb 01       	movw	r24, r22
 434:	97 f9       	bld	r25, 7
 436:	08 95       	ret

00000438 <__gesf2>:
 438:	0e 94 cf 01 	call	0x39e	; 0x39e <__fp_cmp>
 43c:	08 f4       	brcc	.+2      	; 0x440 <__gesf2+0x8>
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	08 95       	ret

00000442 <__mulsf3>:
 442:	0e 94 34 02 	call	0x468	; 0x468 <__mulsf3x>
 446:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_round>
 44a:	0e 94 97 02 	call	0x52e	; 0x52e <__fp_pscA>
 44e:	38 f0       	brcs	.+14     	; 0x45e <__mulsf3+0x1c>
 450:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_pscB>
 454:	20 f0       	brcs	.+8      	; 0x45e <__mulsf3+0x1c>
 456:	95 23       	and	r25, r21
 458:	11 f0       	breq	.+4      	; 0x45e <__mulsf3+0x1c>
 45a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 45e:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_nan>
 462:	11 24       	eor	r1, r1
 464:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_szero>

00000468 <__mulsf3x>:
 468:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fp_split3>
 46c:	70 f3       	brcs	.-36     	; 0x44a <__mulsf3+0x8>

0000046e <__mulsf3_pse>:
 46e:	95 9f       	mul	r25, r21
 470:	c1 f3       	breq	.-16     	; 0x462 <__mulsf3+0x20>
 472:	95 0f       	add	r25, r21
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	55 1f       	adc	r21, r21
 478:	62 9f       	mul	r22, r18
 47a:	f0 01       	movw	r30, r0
 47c:	72 9f       	mul	r23, r18
 47e:	bb 27       	eor	r27, r27
 480:	f0 0d       	add	r31, r0
 482:	b1 1d       	adc	r27, r1
 484:	63 9f       	mul	r22, r19
 486:	aa 27       	eor	r26, r26
 488:	f0 0d       	add	r31, r0
 48a:	b1 1d       	adc	r27, r1
 48c:	aa 1f       	adc	r26, r26
 48e:	64 9f       	mul	r22, r20
 490:	66 27       	eor	r22, r22
 492:	b0 0d       	add	r27, r0
 494:	a1 1d       	adc	r26, r1
 496:	66 1f       	adc	r22, r22
 498:	82 9f       	mul	r24, r18
 49a:	22 27       	eor	r18, r18
 49c:	b0 0d       	add	r27, r0
 49e:	a1 1d       	adc	r26, r1
 4a0:	62 1f       	adc	r22, r18
 4a2:	73 9f       	mul	r23, r19
 4a4:	b0 0d       	add	r27, r0
 4a6:	a1 1d       	adc	r26, r1
 4a8:	62 1f       	adc	r22, r18
 4aa:	83 9f       	mul	r24, r19
 4ac:	a0 0d       	add	r26, r0
 4ae:	61 1d       	adc	r22, r1
 4b0:	22 1f       	adc	r18, r18
 4b2:	74 9f       	mul	r23, r20
 4b4:	33 27       	eor	r19, r19
 4b6:	a0 0d       	add	r26, r0
 4b8:	61 1d       	adc	r22, r1
 4ba:	23 1f       	adc	r18, r19
 4bc:	84 9f       	mul	r24, r20
 4be:	60 0d       	add	r22, r0
 4c0:	21 1d       	adc	r18, r1
 4c2:	82 2f       	mov	r24, r18
 4c4:	76 2f       	mov	r23, r22
 4c6:	6a 2f       	mov	r22, r26
 4c8:	11 24       	eor	r1, r1
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	9a f0       	brmi	.+38     	; 0x4f6 <__mulsf3_pse+0x88>
 4d0:	f1 f0       	breq	.+60     	; 0x50e <__mulsf3_pse+0xa0>
 4d2:	88 23       	and	r24, r24
 4d4:	4a f0       	brmi	.+18     	; 0x4e8 <__mulsf3_pse+0x7a>
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__mulsf3_pse+0x64>
 4e8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ea:	51 05       	cpc	r21, r1
 4ec:	80 f0       	brcs	.+32     	; 0x50e <__mulsf3_pse+0xa0>
 4ee:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_inf>
 4f2:	0c 94 16 02 	jmp	0x42c	; 0x42c <__fp_szero>
 4f6:	5f 3f       	cpi	r21, 0xFF	; 255
 4f8:	e4 f3       	brlt	.-8      	; 0x4f2 <__mulsf3_pse+0x84>
 4fa:	98 3e       	cpi	r25, 0xE8	; 232
 4fc:	d4 f3       	brlt	.-12     	; 0x4f2 <__mulsf3_pse+0x84>
 4fe:	86 95       	lsr	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	e7 95       	ror	r30
 50a:	9f 5f       	subi	r25, 0xFF	; 255
 50c:	c1 f7       	brne	.-16     	; 0x4fe <__mulsf3_pse+0x90>
 50e:	fe 2b       	or	r31, r30
 510:	88 0f       	add	r24, r24
 512:	91 1d       	adc	r25, r1
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret

0000051c <__fp_inf>:
 51c:	97 f9       	bld	r25, 7
 51e:	9f 67       	ori	r25, 0x7F	; 127
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	08 95       	ret

00000528 <__fp_nan>:
 528:	9f ef       	ldi	r25, 0xFF	; 255
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	08 95       	ret

0000052e <__fp_pscA>:
 52e:	00 24       	eor	r0, r0
 530:	0a 94       	dec	r0
 532:	16 16       	cp	r1, r22
 534:	17 06       	cpc	r1, r23
 536:	18 06       	cpc	r1, r24
 538:	09 06       	cpc	r0, r25
 53a:	08 95       	ret

0000053c <__fp_pscB>:
 53c:	00 24       	eor	r0, r0
 53e:	0a 94       	dec	r0
 540:	12 16       	cp	r1, r18
 542:	13 06       	cpc	r1, r19
 544:	14 06       	cpc	r1, r20
 546:	05 06       	cpc	r0, r21
 548:	08 95       	ret

0000054a <__fp_round>:
 54a:	09 2e       	mov	r0, r25
 54c:	03 94       	inc	r0
 54e:	00 0c       	add	r0, r0
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0xc>
 552:	88 23       	and	r24, r24
 554:	52 f0       	brmi	.+20     	; 0x56a <__fp_round+0x20>
 556:	bb 0f       	add	r27, r27
 558:	40 f4       	brcc	.+16     	; 0x56a <__fp_round+0x20>
 55a:	bf 2b       	or	r27, r31
 55c:	11 f4       	brne	.+4      	; 0x562 <__fp_round+0x18>
 55e:	60 ff       	sbrs	r22, 0
 560:	04 c0       	rjmp	.+8      	; 0x56a <__fp_round+0x20>
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
