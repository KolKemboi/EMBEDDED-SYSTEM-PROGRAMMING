
FuckMySanity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000736  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  00000736  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000135f  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  00001c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2b  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b46  00000000  00000000  0000344f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003f95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3c       	cpi	r26, 0xC8	; 200
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
  7a:	0c 94 99 03 	jmp	0x732	; 0x732 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
 #include "keypad.h"

 void keypad_init(void)
 {
 //setting ROWs as outputs
	ROW0_DDR |=(1U<<ROW0);  
  82:	81 b3       	in	r24, 0x11	; 17
  84:	81 60       	ori	r24, 0x01	; 1
  86:	81 bb       	out	0x11, r24	; 17
	ROW1_DDR |=(1U<<ROW1);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	81 bb       	out	0x11, r24	; 17
	ROW2_DDR |=(1U<<ROW2);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	84 60       	ori	r24, 0x04	; 4
  92:	81 bb       	out	0x11, r24	; 17
	ROW3_DDR |=(1U<<ROW3);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	88 60       	ori	r24, 0x08	; 8
  98:	81 bb       	out	0x11, r24	; 17
//setting pins as input
	LINE0_DDR&=~(1U<<LINE0);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	81 bb       	out	0x11, r24	; 17
	LINE1_DDR&=~(1U<<LINE1);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	81 bb       	out	0x11, r24	; 17
	LINE2_DDR&=~(1U<<LINE2);
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	8f 7b       	andi	r24, 0xBF	; 191
  aa:	81 bb       	out	0x11, r24	; 17
	LINE3_DDR&=~(1U<<LINE3);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	8f 77       	andi	r24, 0x7F	; 127
  b0:	81 bb       	out	0x11, r24	; 17
//enabling lines pull up
	LINE0_PULLUP|=(1U<<LINE0);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	82 bb       	out	0x12, r24	; 18
	LINE1_PULLUP|=(1U<<LINE1);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	82 bb       	out	0x12, r24	; 18
	LINE2_PULLUP|=(1U<<LINE2);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	82 bb       	out	0x12, r24	; 18
	LINE3_PULLUP|=(1U<<LINE3);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <keypad_scan>:
 }
 uint8_t keypad_scan(void)
 {
 uint8_t row,key,shift;
 //loop on rows
	 for(row=0;row<4;row++)
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	bd c0       	rjmp	.+378    	; 0x24a <keypad_scan+0x17e>
	 {
	 //put 1's on all rows
	 ROW0_PORT|=(1U<<ROW0);
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	82 bb       	out	0x12, r24	; 18
	 ROW1_PORT|=(1U<<ROW1);
  d6:	82 b3       	in	r24, 0x12	; 18
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	82 bb       	out	0x12, r24	; 18
	 ROW2_PORT|=(1U<<ROW2);
  dc:	82 b3       	in	r24, 0x12	; 18
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	82 bb       	out	0x12, r24	; 18
	 ROW3_PORT|=(1U<<ROW3);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	82 bb       	out	0x12, r24	; 18
	 //put zero on the selected row
		 if(row==0)
  e8:	61 11       	cpse	r22, r1
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <keypad_scan+0x28>
		 {
			ROW0_PORT&=~(1U<<ROW0);
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	0f c0       	rjmp	.+30     	; 0x112 <keypad_scan+0x46>
		 }
		 else if(row==1)
  f4:	61 30       	cpi	r22, 0x01	; 1
  f6:	21 f4       	brne	.+8      	; 0x100 <keypad_scan+0x34>
		 {
			ROW1_PORT&=~(1U<<ROW1);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	09 c0       	rjmp	.+18     	; 0x112 <keypad_scan+0x46>
		 }
		 else if(row==2)
 100:	62 30       	cpi	r22, 0x02	; 2
 102:	21 f4       	brne	.+8      	; 0x10c <keypad_scan+0x40>
		 {
			 ROW2_PORT&=~(1U<<ROW2);
 104:	82 b3       	in	r24, 0x12	; 18
 106:	8b 7f       	andi	r24, 0xFB	; 251
 108:	82 bb       	out	0x12, r24	; 18
 10a:	03 c0       	rjmp	.+6      	; 0x112 <keypad_scan+0x46>
		 }
		 else 
		 {
			ROW3_PORT&=~(1U<<ROW3);	 
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	82 bb       	out	0x12, r24	; 18
		 }
	 //take snapshot from the input
	 shift  = (LINE0_PIN&(1U<<LINE0))>>LINE0;
 112:	20 b3       	in	r18, 0x10	; 16
 114:	20 71       	andi	r18, 0x10	; 16
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	32 95       	swap	r19
 11a:	22 95       	swap	r18
 11c:	2f 70       	andi	r18, 0x0F	; 15
 11e:	23 27       	eor	r18, r19
 120:	3f 70       	andi	r19, 0x0F	; 15
 122:	23 27       	eor	r18, r19
	 key  = (shift<<0);
	 shift  = (LINE1_PIN&(1U<<LINE1))>>LINE1;
 124:	90 b3       	in	r25, 0x10	; 16
 126:	90 72       	andi	r25, 0x20	; 32
 128:	89 2f       	mov	r24, r25
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	92 95       	swap	r25
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	89 27       	eor	r24, r25
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 27       	eor	r24, r25
	 key  |= (shift<<1);
 13c:	99 27       	eor	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	28 2b       	or	r18, r24
	 shift  = (LINE2_PIN&(1U<<LINE2))>>LINE2;
 144:	90 b3       	in	r25, 0x10	; 16
 146:	90 74       	andi	r25, 0x40	; 64
 148:	89 2f       	mov	r24, r25
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	00 24       	eor	r0, r0
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	00 1c       	adc	r0, r0
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	00 1c       	adc	r0, r0
 15a:	89 2f       	mov	r24, r25
 15c:	90 2d       	mov	r25, r0
	 key  |= (shift<<2);
 15e:	99 27       	eor	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	82 2b       	or	r24, r18
	 shift  = (LINE3_PIN&(1U<<LINE3))>>LINE3;
 16a:	20 b3       	in	r18, 0x10	; 16
 16c:	22 1f       	adc	r18, r18
 16e:	22 27       	eor	r18, r18
 170:	22 1f       	adc	r18, r18
	 key  |= (shift<<3);
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	82 2b       	or	r24, r18
	 key=key<<4; //0x0000xxxx
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
	 //if there is input
	 //0xF0&LINE0|LINE1|LINE2|LINE3
	 //PIND&0x0f !=0x0f
		
		if(ALL_LINES != 1)
 186:	20 b3       	in	r18, 0x10	; 16
 188:	20 71       	andi	r18, 0x10	; 16
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	a9 01       	movw	r20, r18
 18e:	52 95       	swap	r21
 190:	42 95       	swap	r20
 192:	4f 70       	andi	r20, 0x0F	; 15
 194:	45 27       	eor	r20, r21
 196:	5f 70       	andi	r21, 0x0F	; 15
 198:	45 27       	eor	r20, r21
 19a:	90 b3       	in	r25, 0x10	; 16
 19c:	90 72       	andi	r25, 0x20	; 32
 19e:	29 2f       	mov	r18, r25
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	32 95       	swap	r19
 1a8:	22 95       	swap	r18
 1aa:	2f 70       	andi	r18, 0x0F	; 15
 1ac:	23 27       	eor	r18, r19
 1ae:	3f 70       	andi	r19, 0x0F	; 15
 1b0:	23 27       	eor	r18, r19
 1b2:	24 23       	and	r18, r20
 1b4:	35 23       	and	r19, r21
 1b6:	40 b3       	in	r20, 0x10	; 16
 1b8:	40 74       	andi	r20, 0x40	; 64
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	00 24       	eor	r0, r0
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	00 1c       	adc	r0, r0
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	00 1c       	adc	r0, r0
 1ca:	45 2f       	mov	r20, r21
 1cc:	50 2d       	mov	r21, r0
 1ce:	24 23       	and	r18, r20
 1d0:	35 23       	and	r19, r21
 1d2:	40 b3       	in	r20, 0x10	; 16
 1d4:	44 1f       	adc	r20, r20
 1d6:	44 27       	eor	r20, r20
 1d8:	44 1f       	adc	r20, r20
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	24 23       	and	r18, r20
 1de:	35 23       	and	r19, r21
 1e0:	21 30       	cpi	r18, 0x01	; 1
 1e2:	31 05       	cpc	r19, r1
 1e4:	89 f1       	breq	.+98     	; 0x248 <keypad_scan+0x17c>
		{
		//delay for the input to be cleared
		while(ALL_LINES != 1);
 1e6:	20 b3       	in	r18, 0x10	; 16
 1e8:	20 71       	andi	r18, 0x10	; 16
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	52 95       	swap	r21
 1f0:	42 95       	swap	r20
 1f2:	4f 70       	andi	r20, 0x0F	; 15
 1f4:	45 27       	eor	r20, r21
 1f6:	5f 70       	andi	r21, 0x0F	; 15
 1f8:	45 27       	eor	r20, r21
 1fa:	90 b3       	in	r25, 0x10	; 16
 1fc:	90 72       	andi	r25, 0x20	; 32
 1fe:	29 2f       	mov	r18, r25
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	36 95       	lsr	r19
 204:	27 95       	ror	r18
 206:	32 95       	swap	r19
 208:	22 95       	swap	r18
 20a:	2f 70       	andi	r18, 0x0F	; 15
 20c:	23 27       	eor	r18, r19
 20e:	3f 70       	andi	r19, 0x0F	; 15
 210:	23 27       	eor	r18, r19
 212:	24 23       	and	r18, r20
 214:	35 23       	and	r19, r21
 216:	40 b3       	in	r20, 0x10	; 16
 218:	40 74       	andi	r20, 0x40	; 64
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	00 24       	eor	r0, r0
 21e:	44 0f       	add	r20, r20
 220:	55 1f       	adc	r21, r21
 222:	00 1c       	adc	r0, r0
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	00 1c       	adc	r0, r0
 22a:	45 2f       	mov	r20, r21
 22c:	50 2d       	mov	r21, r0
 22e:	24 23       	and	r18, r20
 230:	35 23       	and	r19, r21
 232:	40 b3       	in	r20, 0x10	; 16
 234:	44 1f       	adc	r20, r20
 236:	44 27       	eor	r20, r20
 238:	44 1f       	adc	r20, r20
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	24 23       	and	r18, r20
 23e:	35 23       	and	r19, r21
 240:	21 30       	cpi	r18, 0x01	; 1
 242:	31 05       	cpc	r19, r1
 244:	81 f6       	brne	.-96     	; 0x1e6 <keypad_scan+0x11a>
 246:	04 c0       	rjmp	.+8      	; 0x250 <keypad_scan+0x184>
 }
 uint8_t keypad_scan(void)
 {
 uint8_t row,key,shift;
 //loop on rows
	 for(row=0;row<4;row++)
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	64 30       	cpi	r22, 0x04	; 4
 24c:	08 f4       	brcc	.+2      	; 0x250 <keypad_scan+0x184>
 24e:	40 cf       	rjmp	.-384    	; 0xd0 <keypad_scan+0x4>
		break;
		}
 
	 }
 //when break switch rows
	switch(row)
 250:	61 30       	cpi	r22, 0x01	; 1
 252:	d1 f0       	breq	.+52     	; 0x288 <keypad_scan+0x1bc>
 254:	28 f0       	brcs	.+10     	; 0x260 <keypad_scan+0x194>
 256:	62 30       	cpi	r22, 0x02	; 2
 258:	51 f1       	breq	.+84     	; 0x2ae <keypad_scan+0x1e2>
 25a:	63 30       	cpi	r22, 0x03	; 3
 25c:	d9 f1       	breq	.+118    	; 0x2d4 <keypad_scan+0x208>
 25e:	4d c0       	rjmp	.+154    	; 0x2fa <keypad_scan+0x22e>
	{
		case 0:
		//inside the row switching switch the key
		switch(key)
 260:	80 3b       	cpi	r24, 0xB0	; 176
 262:	09 f4       	brne	.+2      	; 0x266 <keypad_scan+0x19a>
 264:	4c c0       	rjmp	.+152    	; 0x2fe <keypad_scan+0x232>
 266:	18 f4       	brcc	.+6      	; 0x26e <keypad_scan+0x1a2>
 268:	80 37       	cpi	r24, 0x70	; 112
 26a:	31 f0       	breq	.+12     	; 0x278 <keypad_scan+0x1ac>
 26c:	07 c0       	rjmp	.+14     	; 0x27c <keypad_scan+0x1b0>
 26e:	80 3d       	cpi	r24, 0xD0	; 208
 270:	39 f0       	breq	.+14     	; 0x280 <keypad_scan+0x1b4>
 272:	80 3e       	cpi	r24, 0xE0	; 224
 274:	39 f0       	breq	.+14     	; 0x284 <keypad_scan+0x1b8>
 276:	02 c0       	rjmp	.+4      	; 0x27c <keypad_scan+0x1b0>
		{
			case 0x70: return '/';
 278:	8f e2       	ldi	r24, 0x2F	; 47
 27a:	08 95       	ret
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '/';
			case 0xB0: return '9';
			case 0xD0: return '8';
 280:	88 e3       	ldi	r24, 0x38	; 56
 282:	08 95       	ret
			case 0xE0: return '7';
 284:	87 e3       	ldi	r24, 0x37	; 55
 286:	08 95       	ret
		}
		break;
		case 1:
		//inside the row switching switch the key
		switch(key)
 288:	80 3b       	cpi	r24, 0xB0	; 176
 28a:	d9 f1       	breq	.+118    	; 0x302 <keypad_scan+0x236>
 28c:	18 f4       	brcc	.+6      	; 0x294 <keypad_scan+0x1c8>
 28e:	80 37       	cpi	r24, 0x70	; 112
 290:	31 f0       	breq	.+12     	; 0x29e <keypad_scan+0x1d2>
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <keypad_scan+0x1d6>
 294:	80 3d       	cpi	r24, 0xD0	; 208
 296:	39 f0       	breq	.+14     	; 0x2a6 <keypad_scan+0x1da>
 298:	80 3e       	cpi	r24, 0xE0	; 224
 29a:	39 f0       	breq	.+14     	; 0x2aa <keypad_scan+0x1de>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <keypad_scan+0x1d6>
		{
			case 0x70: return '*';
 29e:	8a e2       	ldi	r24, 0x2A	; 42
 2a0:	08 95       	ret
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '*';
			case 0xB0: return '6';
			case 0xD0: return '5';
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	08 95       	ret
			case 0xE0: return '4';
 2aa:	84 e3       	ldi	r24, 0x34	; 52
 2ac:	08 95       	ret
		}
		break;
		case 2:
		//inside the row switching switch the key
		switch(key)
 2ae:	80 3b       	cpi	r24, 0xB0	; 176
 2b0:	51 f1       	breq	.+84     	; 0x306 <keypad_scan+0x23a>
 2b2:	18 f4       	brcc	.+6      	; 0x2ba <keypad_scan+0x1ee>
 2b4:	80 37       	cpi	r24, 0x70	; 112
 2b6:	31 f0       	breq	.+12     	; 0x2c4 <keypad_scan+0x1f8>
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <keypad_scan+0x1fc>
 2ba:	80 3d       	cpi	r24, 0xD0	; 208
 2bc:	39 f0       	breq	.+14     	; 0x2cc <keypad_scan+0x200>
 2be:	80 3e       	cpi	r24, 0xE0	; 224
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <keypad_scan+0x204>
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <keypad_scan+0x1fc>
		{
			case 0x70: return '-';
 2c4:	8d e2       	ldi	r24, 0x2D	; 45
 2c6:	08 95       	ret
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	08 95       	ret
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '-';
			case 0xB0: return '3';
			case 0xD0: return '2';
 2cc:	82 e3       	ldi	r24, 0x32	; 50
 2ce:	08 95       	ret
			case 0xE0: return '1';
 2d0:	81 e3       	ldi	r24, 0x31	; 49
 2d2:	08 95       	ret
			
		}
		break;
		case 3:
		//inside the row switching switch the key
		switch(key)
 2d4:	80 3b       	cpi	r24, 0xB0	; 176
 2d6:	c9 f0       	breq	.+50     	; 0x30a <keypad_scan+0x23e>
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <keypad_scan+0x214>
 2da:	80 37       	cpi	r24, 0x70	; 112
 2dc:	31 f0       	breq	.+12     	; 0x2ea <keypad_scan+0x21e>
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <keypad_scan+0x222>
 2e0:	80 3d       	cpi	r24, 0xD0	; 208
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <keypad_scan+0x226>
 2e4:	80 3e       	cpi	r24, 0xE0	; 224
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <keypad_scan+0x22a>
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <keypad_scan+0x222>
		{
			case 0x70: return '+';
 2ea:	8b e2       	ldi	r24, 0x2B	; 43
 2ec:	08 95       	ret
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
			case 0xD0: return '0';
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	08 95       	ret
			case 0xE0: return 'C';
 2f6:	83 e4       	ldi	r24, 0x43	; 67
 2f8:	08 95       	ret
		}
		break;
	}
	//return the value
	return 0;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret
		case 0:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '/';
			case 0xB0: return '9';
 2fe:	89 e3       	ldi	r24, 0x39	; 57
 300:	08 95       	ret
		case 1:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '*';
			case 0xB0: return '6';
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	08 95       	ret
		case 2:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '-';
			case 0xB0: return '3';
 306:	83 e3       	ldi	r24, 0x33	; 51
 308:	08 95       	ret
		case 3:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
 30a:	8d e3       	ldi	r24, 0x3D	; 61
		}
		break;
	}
	//return the value
	return 0;
  }
 30c:	08 95       	ret

0000030e <lcd_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	98 b3       	in	r25, 0x18	; 24
 310:	9f 77       	andi	r25, 0x7F	; 127
 312:	98 bb       	out	0x18, r25	; 24
 314:	88 23       	and	r24, r24
 316:	1c f4       	brge	.+6      	; 0x31e <lcd_write+0x10>
 318:	98 b3       	in	r25, 0x18	; 24
 31a:	90 68       	ori	r25, 0x80	; 128
 31c:	98 bb       	out	0x18, r25	; 24
 31e:	98 b3       	in	r25, 0x18	; 24
 320:	9f 7b       	andi	r25, 0xBF	; 191
 322:	98 bb       	out	0x18, r25	; 24
 324:	86 ff       	sbrs	r24, 6
 326:	03 c0       	rjmp	.+6      	; 0x32e <lcd_write+0x20>
 328:	98 b3       	in	r25, 0x18	; 24
 32a:	90 64       	ori	r25, 0x40	; 64
 32c:	98 bb       	out	0x18, r25	; 24
 32e:	98 b3       	in	r25, 0x18	; 24
 330:	9f 7d       	andi	r25, 0xDF	; 223
 332:	98 bb       	out	0x18, r25	; 24
 334:	85 ff       	sbrs	r24, 5
 336:	03 c0       	rjmp	.+6      	; 0x33e <lcd_write+0x30>
 338:	98 b3       	in	r25, 0x18	; 24
 33a:	90 62       	ori	r25, 0x20	; 32
 33c:	98 bb       	out	0x18, r25	; 24
 33e:	98 b3       	in	r25, 0x18	; 24
 340:	9f 7e       	andi	r25, 0xEF	; 239
 342:	98 bb       	out	0x18, r25	; 24
 344:	84 ff       	sbrs	r24, 4
 346:	03 c0       	rjmp	.+6      	; 0x34e <lcd_write+0x40>
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	80 61       	ori	r24, 0x10	; 16
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	82 60       	ori	r24, 0x02	; 2
 352:	88 bb       	out	0x18, r24	; 24
 354:	00 00       	nop
 356:	88 b3       	in	r24, 0x18	; 24
 358:	8d 7f       	andi	r24, 0xFD	; 253
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	00 00       	nop
 35e:	08 95       	ret

00000360 <lcd_write_character>:
 360:	cf 93       	push	r28
 362:	c8 2f       	mov	r28, r24
 364:	88 b3       	in	r24, 0x18	; 24
 366:	81 60       	ori	r24, 0x01	; 1
 368:	88 bb       	out	0x18, r24	; 24
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	8d 7f       	andi	r24, 0xFD	; 253
 36e:	88 bb       	out	0x18, r24	; 24
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 376:	8c 2f       	mov	r24, r28
 378:	82 95       	swap	r24
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <lcd_write_string>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	8c 01       	movw	r16, r24
 38c:	c0 e0       	ldi	r28, 0x00	; 0
 38e:	07 c0       	rjmp	.+14     	; 0x39e <lcd_write_string+0x1a>
 390:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_character>
 394:	cf 5f       	subi	r28, 0xFF	; 255
 396:	8a e1       	ldi	r24, 0x1A	; 26
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <lcd_write_string+0x14>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_write_string+0x1a>
 39e:	f8 01       	movw	r30, r16
 3a0:	ec 0f       	add	r30, r28
 3a2:	f1 1d       	adc	r31, r1
 3a4:	80 81       	ld	r24, Z
 3a6:	81 11       	cpse	r24, r1
 3a8:	f3 cf       	rjmp	.-26     	; 0x390 <lcd_write_string+0xc>
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <lcd_write_instruction>:
 3b2:	cf 93       	push	r28
 3b4:	c8 2f       	mov	r28, r24
 3b6:	88 b3       	in	r24, 0x18	; 24
 3b8:	8e 7f       	andi	r24, 0xFE	; 254
 3ba:	88 bb       	out	0x18, r24	; 24
 3bc:	88 b3       	in	r24, 0x18	; 24
 3be:	8d 7f       	andi	r24, 0xFD	; 253
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	8c 2f       	mov	r24, r28
 3c4:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 3c8:	8c 2f       	mov	r24, r28
 3ca:	82 95       	swap	r24
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <lcd_init>:
 3d6:	87 b3       	in	r24, 0x17	; 23
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	87 bb       	out	0x17, r24	; 23
 3dc:	87 b3       	in	r24, 0x17	; 23
 3de:	80 64       	ori	r24, 0x40	; 64
 3e0:	87 bb       	out	0x17, r24	; 23
 3e2:	87 b3       	in	r24, 0x17	; 23
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	87 bb       	out	0x17, r24	; 23
 3e8:	87 b3       	in	r24, 0x17	; 23
 3ea:	80 61       	ori	r24, 0x10	; 16
 3ec:	87 bb       	out	0x17, r24	; 23
 3ee:	87 b3       	in	r24, 0x17	; 23
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	87 bb       	out	0x17, r24	; 23
 3f4:	87 b3       	in	r24, 0x17	; 23
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	87 bb       	out	0x17, r24	; 23
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	87 bb       	out	0x17, r24	; 23
 400:	87 ea       	ldi	r24, 0xA7	; 167
 402:	91 e6       	ldi	r25, 0x61	; 97
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	88 b3       	in	r24, 0x18	; 24
 40e:	8e 7f       	andi	r24, 0xFE	; 254
 410:	88 bb       	out	0x18, r24	; 24
 412:	88 b3       	in	r24, 0x18	; 24
 414:	8d 7f       	andi	r24, 0xFD	; 253
 416:	88 bb       	out	0x18, r24	; 24
 418:	80 e3       	ldi	r24, 0x30	; 48
 41a:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 41e:	83 ec       	ldi	r24, 0xC3	; 195
 420:	99 e0       	ldi	r25, 0x09	; 9
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 430:	92 e4       	ldi	r25, 0x42	; 66
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	80 e3       	ldi	r24, 0x30	; 48
 43a:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 43e:	82 e4       	ldi	r24, 0x42	; 66
 440:	8a 95       	dec	r24
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	88 e2       	ldi	r24, 0x28	; 40
 448:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_write>
 44c:	9a e1       	ldi	r25, 0x1A	; 26
 44e:	9a 95       	dec	r25
 450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
 45a:	8a e1       	ldi	r24, 0x1A	; 26
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
 468:	9a e1       	ldi	r25, 0x1A	; 26
 46a:	9a 95       	dec	r25
 46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
 476:	87 ee       	ldi	r24, 0xE7	; 231
 478:	93 e0       	ldi	r25, 0x03	; 3
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 480:	00 00       	nop
 482:	86 e0       	ldi	r24, 0x06	; 6
 484:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
 488:	9a e1       	ldi	r25, 0x1A	; 26
 48a:	9a 95       	dec	r25
 48c:	f1 f7       	brne	.-4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 490:	8c e0       	ldi	r24, 0x0C	; 12
 492:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
 496:	8a e1       	ldi	r24, 0x1A	; 26
 498:	8a 95       	dec	r24
 49a:	f1 f7       	brne	.-4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	08 95       	ret

000004a0 <lcd_clearDisplay>:
	_delay_us (50);
}

void lcd_clearDisplay(void)	 
{
	lcd_write_instruction(clearDisplay);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4a6:	83 ef       	ldi	r24, 0xF3	; 243
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <lcd_clearDisplay+0xa>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <lcd_clearDisplay+0x10>
 4b0:	00 00       	nop
 4b2:	08 95       	ret

000004b4 <main>:
#define MAX_PASSWORD_LENGTH 4
#define MAX_TRIALS 3
const char correct_password[MAX_PASSWORD_LENGTH + 1] = "1234";

int main(void)
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	00 d0       	rcall	.+0      	; 0x4ba <main+0x6>
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <main+0x8>
 4bc:	1f 92       	push	r1
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t data_from_keypad;
	char entered_password[MAX_PASSWORD_LENGTH + 1] = "";
 4c2:	1a 82       	std	Y+2, r1	; 0x02
 4c4:	19 82       	std	Y+1, r1	; 0x01
 4c6:	fe 01       	movw	r30, r28
 4c8:	33 96       	adiw	r30, 0x03	; 3
 4ca:	83 e0       	ldi	r24, 0x03	; 3
 4cc:	df 01       	movw	r26, r30
 4ce:	1d 92       	st	X+, r1
 4d0:	8a 95       	dec	r24
 4d2:	e9 f7       	brne	.-6      	; 0x4ce <main+0x1a>
	uint8_t entered_index = 0;
	uint8_t trial_count = 0;
	uint8_t safe_open = 0;

	keypad_init();
 4d4:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
	lcd_init();
 4d8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <lcd_init>

	DDRA = 0xFF;
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	8a bb       	out	0x1a, r24	; 26
	
	lcd_write_string("Hello!");
 4e0:	80 e6       	ldi	r24, 0x60	; 96
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 4e8:	bf e9       	ldi	r27, 0x9F	; 159
 4ea:	e6 e8       	ldi	r30, 0x86	; 134
 4ec:	f1 e0       	ldi	r31, 0x01	; 1
 4ee:	b1 50       	subi	r27, 0x01	; 1
 4f0:	e0 40       	sbci	r30, 0x00	; 0
 4f2:	f0 40       	sbci	r31, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x3a>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x44>
 4f8:	00 00       	nop
	_delay_ms(500);
	lcd_clearDisplay();
 4fa:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
	lcd_write_string("Enter Password");
 4fe:	87 e6       	ldi	r24, 0x67	; 103
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 506:	2f e3       	ldi	r18, 0x3F	; 63
 508:	8d e0       	ldi	r24, 0x0D	; 13
 50a:	93 e0       	ldi	r25, 0x03	; 3
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <main+0x58>
 514:	00 c0       	rjmp	.+0      	; 0x516 <main+0x62>
 516:	00 00       	nop
	_delay_ms(1000);
	lcd_clearDisplay();
 518:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
{
	uint8_t data_from_keypad;
	char entered_password[MAX_PASSWORD_LENGTH + 1] = "";
	uint8_t entered_index = 0;
	uint8_t trial_count = 0;
	uint8_t safe_open = 0;
 51c:	e1 2c       	mov	r14, r1
int main(void)
{
	uint8_t data_from_keypad;
	char entered_password[MAX_PASSWORD_LENGTH + 1] = "";
	uint8_t entered_index = 0;
	uint8_t trial_count = 0;
 51e:	f1 2c       	mov	r15, r1

int main(void)
{
	uint8_t data_from_keypad;
	char entered_password[MAX_PASSWORD_LENGTH + 1] = "";
	uint8_t entered_index = 0;
 520:	10 e0       	ldi	r17, 0x00	; 0
	_delay_ms(1000);
	lcd_clearDisplay();

	while (1)
	{
		if (trial_count >= MAX_TRIALS)  // Lock out after exceeding maximum trials
 522:	a2 e0       	ldi	r26, 0x02	; 2
 524:	af 15       	cp	r26, r15
 526:	38 f4       	brcc	.+14     	; 0x536 <main+0x82>
		{
			lcd_clearDisplay();
 528:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
			lcd_write_string("Locked Out");
 52c:	86 e7       	ldi	r24, 0x76	; 118
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 534:	ff cf       	rjmp	.-2      	; 0x534 <main+0x80>
			while (1);  // Stop further input
		}

		data_from_keypad = keypad_scan();
 536:	0e 94 66 00 	call	0xcc	; 0xcc <keypad_scan>
 53a:	08 2f       	mov	r16, r24

		if (safe_open && data_from_keypad == '*')  // Close safe
 53c:	ee 20       	and	r14, r14
 53e:	c1 f0       	breq	.+48     	; 0x570 <main+0xbc>
 540:	8a 32       	cpi	r24, 0x2A	; 42
 542:	b1 f4       	brne	.+44     	; 0x570 <main+0xbc>
		{
			safe_open = 0;
			lcd_clearDisplay();
 544:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
			lcd_write_string("Safe Closed");
 548:	81 e8       	ldi	r24, 0x81	; 129
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 550:	bf e7       	ldi	r27, 0x7F	; 127
 552:	ea e1       	ldi	r30, 0x1A	; 26
 554:	f6 e0       	ldi	r31, 0x06	; 6
 556:	b1 50       	subi	r27, 0x01	; 1
 558:	e0 40       	sbci	r30, 0x00	; 0
 55a:	f0 40       	sbci	r31, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <main+0xa2>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <main+0xac>
 560:	00 00       	nop
			_delay_ms(2000);
			PORTA &= (~(1<<PA2));
 562:	8b b3       	in	r24, 0x1b	; 27
 564:	8b 7f       	andi	r24, 0xFB	; 251
 566:	8b bb       	out	0x1b, r24	; 27
			lcd_clearDisplay();
 568:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>

		data_from_keypad = keypad_scan();

		if (safe_open && data_from_keypad == '*')  // Close safe
		{
			safe_open = 0;
 56c:	e1 2c       	mov	r14, r1
			lcd_clearDisplay();
			lcd_write_string("Safe Closed");
			_delay_ms(2000);
			PORTA &= (~(1<<PA2));
			lcd_clearDisplay();
			continue;
 56e:	d9 cf       	rjmp	.-78     	; 0x522 <main+0x6e>
		}

		if (data_from_keypad == 'C')  // Check if 'C' (Enter) is pressed
 570:	03 34       	cpi	r16, 0x43	; 67
 572:	09 f0       	breq	.+2      	; 0x576 <main+0xc2>
 574:	8f c0       	rjmp	.+286    	; 0x694 <main+0x1e0>
		{
			entered_password[entered_index] = '\0';  // Null-terminate the entered password
 576:	e1 e0       	ldi	r30, 0x01	; 1
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	ec 0f       	add	r30, r28
 57c:	fd 1f       	adc	r31, r29
 57e:	e1 0f       	add	r30, r17
 580:	f1 1d       	adc	r31, r1
 582:	10 82       	st	Z, r1
			lcd_clearDisplay();
 584:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>

			if (strcmp(entered_password, correct_password) == 0)  // Password matches
 588:	63 ec       	ldi	r22, 0xC3	; 195
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	ce 01       	movw	r24, r28
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	0e 94 90 03 	call	0x720	; 0x720 <strcmp>
 594:	89 2b       	or	r24, r25
 596:	09 f0       	breq	.+2      	; 0x59a <main+0xe6>
 598:	45 c0       	rjmp	.+138    	; 0x624 <main+0x170>
			{
				lcd_write_string("Access Granted");
 59a:	8d e8       	ldi	r24, 0x8D	; 141
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 5a2:	2f e7       	ldi	r18, 0x7F	; 127
 5a4:	8a e1       	ldi	r24, 0x1A	; 26
 5a6:	96 e0       	ldi	r25, 0x06	; 6
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0xf4>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0xfe>
 5b2:	00 00       	nop
				_delay_ms(2000);
				lcd_clearDisplay();
 5b4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
				PORTA |= (1<<PA2);
 5b8:	8b b3       	in	r24, 0x1b	; 27
 5ba:	84 60       	ori	r24, 0x04	; 4
 5bc:	8b bb       	out	0x1b, r24	; 27
 5be:	a7 ea       	ldi	r26, 0xA7	; 167
 5c0:	b1 e6       	ldi	r27, 0x61	; 97
 5c2:	11 97       	sbiw	r26, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <main+0x10e>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <main+0x114>
 5c8:	00 00       	nop
				_delay_ms(100);
				
				for(int i = 0; i < 5; i++)
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	13 c0       	rjmp	.+38     	; 0x5f6 <main+0x142>
				{
					PORTA |= (1<<PA0);
 5d0:	2b b3       	in	r18, 0x1b	; 27
 5d2:	21 60       	ori	r18, 0x01	; 1
 5d4:	2b bb       	out	0x1b, r18	; 27
 5d6:	e7 ea       	ldi	r30, 0xA7	; 167
 5d8:	f1 e6       	ldi	r31, 0x61	; 97
 5da:	31 97       	sbiw	r30, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <main+0x126>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <main+0x12c>
 5e0:	00 00       	nop
					_delay_ms(100);
					PORTA &= (~(1<<PA0));
 5e2:	2b b3       	in	r18, 0x1b	; 27
 5e4:	2e 7f       	andi	r18, 0xFE	; 254
 5e6:	2b bb       	out	0x1b, r18	; 27
 5e8:	a7 ea       	ldi	r26, 0xA7	; 167
 5ea:	b1 e6       	ldi	r27, 0x61	; 97
 5ec:	11 97       	sbiw	r26, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <main+0x138>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <main+0x13e>
 5f2:	00 00       	nop
				_delay_ms(2000);
				lcd_clearDisplay();
				PORTA |= (1<<PA2);
				_delay_ms(100);
				
				for(int i = 0; i < 5; i++)
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	85 30       	cpi	r24, 0x05	; 5
 5f8:	91 05       	cpc	r25, r1
 5fa:	54 f3       	brlt	.-44     	; 0x5d0 <main+0x11c>
					PORTA |= (1<<PA0);
					_delay_ms(100);
					PORTA &= (~(1<<PA0));
					_delay_ms(100);
				}
				lcd_write_string("Safe Opened");
 5fc:	8c e9       	ldi	r24, 0x9C	; 156
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 604:	bf e3       	ldi	r27, 0x3F	; 63
 606:	ed e0       	ldi	r30, 0x0D	; 13
 608:	f3 e0       	ldi	r31, 0x03	; 3
 60a:	b1 50       	subi	r27, 0x01	; 1
 60c:	e0 40       	sbci	r30, 0x00	; 0
 60e:	f0 40       	sbci	r31, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0x156>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0x160>
 614:	00 00       	nop
				_delay_ms(1000);
				lcd_clearDisplay();
 616:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
				
				safe_open = 1;
				// Reset password and allow for the next input
				entered_index = 0;
				entered_password[0] = '\0';  // Clear entered password
 61a:	19 82       	std	Y+1, r1	; 0x01
				}
				lcd_write_string("Safe Opened");
				_delay_ms(1000);
				lcd_clearDisplay();
				
				safe_open = 1;
 61c:	ee 24       	eor	r14, r14
 61e:	e3 94       	inc	r14
				// Reset password and allow for the next input
				entered_index = 0;
 620:	10 e0       	ldi	r17, 0x00	; 0
 622:	7f cf       	rjmp	.-258    	; 0x522 <main+0x6e>
				entered_password[0] = '\0';  // Clear entered password
			}
			else  // Incorrect password
			{
				trial_count++;
 624:	f3 94       	inc	r15
				lcd_write_string("Access Denied");
 626:	88 ea       	ldi	r24, 0xA8	; 168
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 62e:	2f e7       	ldi	r18, 0x7F	; 127
 630:	8a e1       	ldi	r24, 0x1A	; 26
 632:	96 e0       	ldi	r25, 0x06	; 6
 634:	21 50       	subi	r18, 0x01	; 1
 636:	80 40       	sbci	r24, 0x00	; 0
 638:	90 40       	sbci	r25, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0x180>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x18a>
 63e:	00 00       	nop
				_delay_ms(2000);
				lcd_clearDisplay();
 640:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
				
			
				PORTA |= (1<<PA1);
 644:	8b b3       	in	r24, 0x1b	; 27
 646:	82 60       	ori	r24, 0x02	; 2
 648:	8b bb       	out	0x1b, r24	; 27
 64a:	a7 ea       	ldi	r26, 0xA7	; 167
 64c:	b1 e6       	ldi	r27, 0x61	; 97
 64e:	11 97       	sbiw	r26, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <main+0x19a>
 652:	00 c0       	rjmp	.+0      	; 0x654 <main+0x1a0>
 654:	00 00       	nop
				_delay_ms(100);
				PORTA &= (~(1<<PA1));
 656:	8b b3       	in	r24, 0x1b	; 27
 658:	8d 7f       	andi	r24, 0xFD	; 253
 65a:	8b bb       	out	0x1b, r24	; 27
 65c:	e7 ea       	ldi	r30, 0xA7	; 167
 65e:	f1 e6       	ldi	r31, 0x61	; 97
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <main+0x1ac>
 664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x1b2>
 666:	00 00       	nop
				_delay_ms(100);
				
				lcd_write_string("Tries Left: ");
 668:	86 eb       	ldi	r24, 0xB6	; 182
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
				lcd_write_character('0' + (MAX_TRIALS - trial_count));
 670:	83 e3       	ldi	r24, 0x33	; 51
 672:	8f 19       	sub	r24, r15
 674:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_character>
 678:	ff e7       	ldi	r31, 0x7F	; 127
 67a:	2a e1       	ldi	r18, 0x1A	; 26
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	f1 50       	subi	r31, 0x01	; 1
 680:	20 40       	sbci	r18, 0x00	; 0
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x1ca>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x1d4>
 688:	00 00       	nop
				_delay_ms(2000);
				lcd_clearDisplay();
 68a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>

				entered_index = 0;
				entered_password[0] = '\0';
 68e:	19 82       	std	Y+1, r1	; 0x01
				lcd_write_string("Tries Left: ");
				lcd_write_character('0' + (MAX_TRIALS - trial_count));
				_delay_ms(2000);
				lcd_clearDisplay();

				entered_index = 0;
 690:	10 e0       	ldi	r17, 0x00	; 0
 692:	47 cf       	rjmp	.-370    	; 0x522 <main+0x6e>
				entered_password[0] = '\0';
			}
		}
		else if (data_from_keypad == '*')  // Handle backspace (delete last character)
 694:	0a 32       	cpi	r16, 0x2A	; 42
 696:	b1 f4       	brne	.+44     	; 0x6c4 <main+0x210>
		{
			if (entered_index > 0)
 698:	11 23       	and	r17, r17
 69a:	09 f4       	brne	.+2      	; 0x69e <main+0x1ea>
 69c:	42 cf       	rjmp	.-380    	; 0x522 <main+0x6e>
			{
				entered_index--;  // Move back to previous character
 69e:	11 50       	subi	r17, 0x01	; 1
				entered_password[entered_index] = '\0';  // Null-terminate the string
 6a0:	e1 e0       	ldi	r30, 0x01	; 1
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	ec 0f       	add	r30, r28
 6a6:	fd 1f       	adc	r31, r29
 6a8:	e1 0f       	add	r30, r17
 6aa:	f1 1d       	adc	r31, r1
 6ac:	10 82       	st	Z, r1

				lcd_clearDisplay();
 6ae:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
				for (uint8_t i = 0; i < entered_index; i++)
 6b2:	00 e0       	ldi	r16, 0x00	; 0
 6b4:	04 c0       	rjmp	.+8      	; 0x6be <main+0x20a>
				{
					lcd_write_character('*');
 6b6:	8a e2       	ldi	r24, 0x2A	; 42
 6b8:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_character>
			{
				entered_index--;  // Move back to previous character
				entered_password[entered_index] = '\0';  // Null-terminate the string

				lcd_clearDisplay();
				for (uint8_t i = 0; i < entered_index; i++)
 6bc:	0f 5f       	subi	r16, 0xFF	; 255
 6be:	01 17       	cp	r16, r17
 6c0:	d0 f3       	brcs	.-12     	; 0x6b6 <main+0x202>
 6c2:	2f cf       	rjmp	.-418    	; 0x522 <main+0x6e>
				{
					lcd_write_character('*');
				}
			}
		}
		else if (data_from_keypad == '=')  // Reveal entered password temporarily
 6c4:	0d 33       	cpi	r16, 0x3D	; 61
 6c6:	d1 f4       	brne	.+52     	; 0x6fc <main+0x248>
		{
			lcd_clearDisplay();
 6c8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
			lcd_write_string(entered_password);
 6cc:	ce 01       	movw	r24, r28
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	0e 94 c2 01 	call	0x384	; 0x384 <lcd_write_string>
 6d4:	9f e9       	ldi	r25, 0x9F	; 159
 6d6:	a6 e8       	ldi	r26, 0x86	; 134
 6d8:	b1 e0       	ldi	r27, 0x01	; 1
 6da:	91 50       	subi	r25, 0x01	; 1
 6dc:	a0 40       	sbci	r26, 0x00	; 0
 6de:	b0 40       	sbci	r27, 0x00	; 0
 6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x226>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x230>
 6e4:	00 00       	nop
			_delay_ms(500);  // Display for 1 millisecond
			lcd_clearDisplay();
 6e6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <lcd_clearDisplay>
			for (uint8_t i = 0; i < entered_index; i++)
 6ea:	00 e0       	ldi	r16, 0x00	; 0
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <main+0x242>
			{
				lcd_write_character('*');
 6ee:	8a e2       	ldi	r24, 0x2A	; 42
 6f0:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_character>
		{
			lcd_clearDisplay();
			lcd_write_string(entered_password);
			_delay_ms(500);  // Display for 1 millisecond
			lcd_clearDisplay();
			for (uint8_t i = 0; i < entered_index; i++)
 6f4:	0f 5f       	subi	r16, 0xFF	; 255
 6f6:	01 17       	cp	r16, r17
 6f8:	d0 f3       	brcs	.-12     	; 0x6ee <main+0x23a>
 6fa:	13 cf       	rjmp	.-474    	; 0x522 <main+0x6e>
			{
				lcd_write_character('*');
			}
		}
		else if (data_from_keypad != 0 && entered_index < MAX_PASSWORD_LENGTH)  // Valid key pressed
 6fc:	00 23       	and	r16, r16
 6fe:	09 f4       	brne	.+2      	; 0x702 <main+0x24e>
 700:	10 cf       	rjmp	.-480    	; 0x522 <main+0x6e>
 702:	14 30       	cpi	r17, 0x04	; 4
 704:	08 f0       	brcs	.+2      	; 0x708 <main+0x254>
 706:	0d cf       	rjmp	.-486    	; 0x522 <main+0x6e>
		{
			lcd_write_character('*');  // Display asterisk
 708:	8a e2       	ldi	r24, 0x2A	; 42
 70a:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_write_character>
			entered_password[entered_index++] = data_from_keypad;  // Store character in password array
 70e:	e1 e0       	ldi	r30, 0x01	; 1
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	ec 0f       	add	r30, r28
 714:	fd 1f       	adc	r31, r29
 716:	e1 0f       	add	r30, r17
 718:	f1 1d       	adc	r31, r1
 71a:	00 83       	st	Z, r16
 71c:	1f 5f       	subi	r17, 0xFF	; 255
 71e:	01 cf       	rjmp	.-510    	; 0x522 <main+0x6e>

00000720 <strcmp>:
 720:	fb 01       	movw	r30, r22
 722:	dc 01       	movw	r26, r24
 724:	8d 91       	ld	r24, X+
 726:	01 90       	ld	r0, Z+
 728:	80 19       	sub	r24, r0
 72a:	01 10       	cpse	r0, r1
 72c:	d9 f3       	breq	.-10     	; 0x724 <strcmp+0x4>
 72e:	99 0b       	sbc	r25, r25
 730:	08 95       	ret

00000732 <_exit>:
 732:	f8 94       	cli

00000734 <__stop_program>:
 734:	ff cf       	rjmp	.-2      	; 0x734 <__stop_program>
