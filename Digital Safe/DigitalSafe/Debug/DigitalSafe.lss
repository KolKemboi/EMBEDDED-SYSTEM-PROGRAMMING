
DigitalSafe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  0000033a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6e  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e2  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000741  00000000  00000000  00001c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000516  00000000  00000000  0000290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  7a:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
	{'1', '2', '3', '-'},
	{'C', '0', '=', '+'}
};

void keypad_init(void) {
	KEYPAD_DDR = 0xF0;   // Upper nibble as output, lower nibble as input
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	87 bb       	out	0x17, r24	; 23
	KEYPAD_PORT = 0xFF;  // Enable pull-up resistors on lower nibble
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret

0000008c <keypad_get_key>:
}

char keypad_get_key(void) {
	for (uint8_t row = 0; row < 4; row++) {
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	42 c0       	rjmp	.+132    	; 0x114 <keypad_get_key+0x88>
		KEYPAD_PORT = ~(1 << (row + 4));  // Set one row low at a time
  90:	43 2f       	mov	r20, r19
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	ba 01       	movw	r22, r20
  96:	6c 5f       	subi	r22, 0xFC	; 252
  98:	7f 4f       	sbci	r23, 0xFF	; 255
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <keypad_get_key+0x18>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <keypad_get_key+0x14>
  a8:	80 95       	com	r24
  aa:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2a e1       	ldi	r18, 0x1A	; 26
  ae:	2a 95       	dec	r18
  b0:	f1 f7       	brne	.-4      	; 0xae <keypad_get_key+0x22>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <keypad_get_key+0x28>

		_delay_us(10);  // Small delay for stabilization
		for (uint8_t col = 0; col < 4; col++) {
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	2b c0       	rjmp	.+86     	; 0x10e <keypad_get_key+0x82>
			if (!(KEYPAD_PIN & (1 << col))) {
  b8:	86 b3       	in	r24, 0x16	; 22
  ba:	62 2f       	mov	r22, r18
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 2e       	mov	r0, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <keypad_get_key+0x3c>
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <keypad_get_key+0x38>
  cc:	80 fd       	sbrc	r24, 0
  ce:	1e c0       	rjmp	.+60     	; 0x10c <keypad_get_key+0x80>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e7       	ldi	r24, 0x7F	; 127
  d2:	98 e3       	ldi	r25, 0x38	; 56
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	20 40       	sbci	r18, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <keypad_get_key+0x4a>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <keypad_get_key+0x54>
  e0:	00 00       	nop
				_delay_ms(50);  // Debounce delay
				while (!(KEYPAD_PIN & (1 << col)));  // Wait for key release
  e2:	86 b3       	in	r24, 0x16	; 22
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	06 2e       	mov	r0, r22
  e8:	02 c0       	rjmp	.+4      	; 0xee <keypad_get_key+0x62>
  ea:	95 95       	asr	r25
  ec:	87 95       	ror	r24
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <keypad_get_key+0x5e>
  f2:	80 ff       	sbrs	r24, 0
  f4:	f6 cf       	rjmp	.-20     	; 0xe2 <keypad_get_key+0x56>
				return keypad_map[row][col];
  f6:	44 0f       	add	r20, r20
  f8:	55 1f       	adc	r21, r21
  fa:	44 0f       	add	r20, r20
  fc:	55 1f       	adc	r21, r21
  fe:	40 5a       	subi	r20, 0xA0	; 160
 100:	5f 4f       	sbci	r21, 0xFF	; 255
 102:	fa 01       	movw	r30, r20
 104:	e6 0f       	add	r30, r22
 106:	f7 1f       	adc	r31, r23
 108:	80 81       	ld	r24, Z
 10a:	08 95       	ret
char keypad_get_key(void) {
	for (uint8_t row = 0; row < 4; row++) {
		KEYPAD_PORT = ~(1 << (row + 4));  // Set one row low at a time

		_delay_us(10);  // Small delay for stabilization
		for (uint8_t col = 0; col < 4; col++) {
 10c:	2f 5f       	subi	r18, 0xFF	; 255
 10e:	24 30       	cpi	r18, 0x04	; 4
 110:	98 f2       	brcs	.-90     	; 0xb8 <keypad_get_key+0x2c>
	KEYPAD_DDR = 0xF0;   // Upper nibble as output, lower nibble as input
	KEYPAD_PORT = 0xFF;  // Enable pull-up resistors on lower nibble
}

char keypad_get_key(void) {
	for (uint8_t row = 0; row < 4; row++) {
 112:	3f 5f       	subi	r19, 0xFF	; 255
 114:	34 30       	cpi	r19, 0x04	; 4
 116:	08 f4       	brcc	.+2      	; 0x11a <keypad_get_key+0x8e>
 118:	bb cf       	rjmp	.-138    	; 0x90 <keypad_get_key+0x4>
				while (!(KEYPAD_PIN & (1 << col)));  // Wait for key release
				return keypad_map[row][col];
			}
		}
	}
	return '\0';  // No key pressed
 11a:	80 e0       	ldi	r24, 0x00	; 0
}
 11c:	08 95       	ret

0000011e <lcd_enable_pulse>:
#include "lcd.h"

void lcd_enable_pulse(void) {
	LCD_CTRL_PORT |= (1 << LCD_EN);
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	80 62       	ori	r24, 0x20	; 32
 122:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_enable_pulse+0x8>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_enable_pulse+0xe>
	_delay_us(1);
	LCD_CTRL_PORT &= ~(1 << LCD_EN);
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	82 bb       	out	0x12, r24	; 18
 132:	87 ec       	ldi	r24, 0xC7	; 199
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcd_enable_pulse+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_enable_pulse+0x1e>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <lcd_cmd>:
	_delay_us(100);
}

void lcd_cmd(uint8_t cmd) {
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
	LCD_CTRL_PORT &= ~(1 << LCD_RS);  // RS = 0 for command
 144:	82 b3       	in	r24, 0x12	; 18
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	82 bb       	out	0x12, r24	; 18
	LCD_DATA_PORT = (cmd & 0xF0);     // Send upper nibble
 14a:	8c 2f       	mov	r24, r28
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	85 bb       	out	0x15, r24	; 21
	lcd_enable_pulse();
 150:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_enable_pulse>

	LCD_DATA_PORT = (cmd << 4);       // Send lower nibble
 154:	c2 95       	swap	r28
 156:	c0 7f       	andi	r28, 0xF0	; 240
 158:	c5 bb       	out	0x15, r28	; 21
	lcd_enable_pulse();
 15a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_enable_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	9f e0       	ldi	r25, 0x0F	; 15
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_cmd+0x22>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_cmd+0x28>
 168:	00 00       	nop

	_delay_ms(2);
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <lcd_putc>:

void lcd_putc(char c) {
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	LCD_CTRL_PORT |= (1 << LCD_RS);   // RS = 1 for data
 172:	82 b3       	in	r24, 0x12	; 18
 174:	80 61       	ori	r24, 0x10	; 16
 176:	82 bb       	out	0x12, r24	; 18
	LCD_DATA_PORT = (c & 0xF0);       // Send upper nibble
 178:	8c 2f       	mov	r24, r28
 17a:	80 7f       	andi	r24, 0xF0	; 240
 17c:	85 bb       	out	0x15, r24	; 21
	lcd_enable_pulse();
 17e:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_enable_pulse>

	LCD_DATA_PORT = (c << 4);         // Send lower nibble
 182:	c2 95       	swap	r28
 184:	c0 7f       	andi	r28, 0xF0	; 240
 186:	c5 bb       	out	0x15, r28	; 21
	lcd_enable_pulse();
 188:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_enable_pulse>
 18c:	8f e9       	ldi	r24, 0x9F	; 159
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_putc+0x22>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_putc+0x28>
 196:	00 00       	nop

	_delay_ms(2);
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <lcd_puts>:

void lcd_puts(const char *str) {
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
	while (*str) {
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <lcd_puts+0xe>
		lcd_putc(*str++);
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_putc>

	_delay_ms(2);
}

void lcd_puts(const char *str) {
	while (*str) {
 1aa:	88 81       	ld	r24, Y
 1ac:	81 11       	cpse	r24, r1
 1ae:	fa cf       	rjmp	.-12     	; 0x1a4 <lcd_puts+0x8>
		lcd_putc(*str++);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:

void lcd_clrscr(void) {
	lcd_cmd(LCD_CLEAR);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
 1bc:	8f e9       	ldi	r24, 0x9F	; 159
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_clrscr+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_clrscr+0x10>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <lcd_gotoxy>:
	_delay_ms(2);
}

void lcd_gotoxy(uint8_t x, uint8_t y) {
	uint8_t addr = (y ? 0x40 : 0x00) + x;
 1ca:	66 23       	and	r22, r22
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <lcd_gotoxy+0x8>
 1ce:	90 e4       	ldi	r25, 0x40	; 64
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <lcd_gotoxy+0xa>
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	89 0f       	add	r24, r25
	lcd_cmd(0x80 | addr);
 1d6:	80 68       	ori	r24, 0x80	; 128
 1d8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
 1dc:	08 95       	ret

000001de <lcd_init>:
}

void lcd_init(void) {
	LCD_CTRL_DDR |= (1 << LCD_RS) | (1 << LCD_EN);
 1de:	81 b3       	in	r24, 0x11	; 17
 1e0:	80 63       	ori	r24, 0x30	; 48
 1e2:	81 bb       	out	0x11, r24	; 17
	LCD_DATA_DDR |= 0xF0;  // Upper nibble as output
 1e4:	84 b3       	in	r24, 0x14	; 20
 1e6:	80 6f       	ori	r24, 0xF0	; 240
 1e8:	84 bb       	out	0x14, r24	; 20
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x10>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init+0x16>
 1f4:	00 00       	nop

	_delay_ms(20);

	lcd_cmd(0x33);
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
	lcd_cmd(0x32);
 1fc:	82 e3       	ldi	r24, 0x32	; 50
 1fe:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
	lcd_cmd(LCD_FUNCTION_SET);
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
	lcd_cmd(LCD_DISPLAY_ON);
 208:	8c e0       	ldi	r24, 0x0C	; 12
 20a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
	lcd_cmd(LCD_CLEAR);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
	lcd_cmd(LCD_ENTRY_MODE);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_cmd>
 21a:	08 95       	ret

0000021c <setup_peripherals>:
const char correct_password[] = "1234";
#define PASSWORD_LENGTH 4

void setup_peripherals(void) {
	// Configure LED and motor pins as output
	DDRD |= (1 << BLUE_LED) | (1 << RED_LED) | (1 << MOTOR_EN) | (1 << MOTOR_CTRL1) | (1 << MOTOR_CTRL2);
 21c:	81 b3       	in	r24, 0x11	; 17
 21e:	8e 6c       	ori	r24, 0xCE	; 206
 220:	81 bb       	out	0x11, r24	; 17

	// Initialize peripherals
	PORTD &= ~((1 << BLUE_LED) | (1 << RED_LED));  // Turn off LEDs
 222:	82 b3       	in	r24, 0x12	; 18
 224:	8f 73       	andi	r24, 0x3F	; 63
 226:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~((1 << MOTOR_EN) | (1 << MOTOR_CTRL1) | (1 << MOTOR_CTRL2));  // Stop motor
 228:	82 b3       	in	r24, 0x12	; 18
 22a:	81 7f       	andi	r24, 0xF1	; 241
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <motor_open>:
}

void motor_open(void) {
	PORTD |= (1 << MOTOR_EN);      // Enable motor
 230:	82 b3       	in	r24, 0x12	; 18
 232:	88 60       	ori	r24, 0x08	; 8
 234:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << MOTOR_CTRL1);   // Set motor direction
 236:	82 b3       	in	r24, 0x12	; 18
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << MOTOR_CTRL2);  // Clear opposite direction
 23c:	82 b3       	in	r24, 0x12	; 18
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <motor_stop>:
}

void motor_stop(void) {
	PORTD &= ~((1 << MOTOR_EN) | (1 << MOTOR_CTRL1) | (1 << MOTOR_CTRL2));
 244:	82 b3       	in	r24, 0x12	; 18
 246:	81 7f       	andi	r24, 0xF1	; 241
 248:	82 bb       	out	0x12, r24	; 18
 24a:	08 95       	ret

0000024c <main>:
}

int main(void) {
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <main+0x6>
 252:	00 d0       	rcall	.+0      	; 0x254 <main+0x8>
 254:	1f 92       	push	r1
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	char entered_password[PASSWORD_LENGTH + 1];  // To store user input
	uint8_t index = 0;                           // Current index of password input

	// Initialize peripherals
	setup_peripherals();
 25a:	0e 94 0e 01 	call	0x21c	; 0x21c <setup_peripherals>
	lcd_init();
 25e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_init>
	keypad_init();
 262:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>

	while (1) {
		lcd_clrscr();
 266:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
		lcd_puts("Enter Password:");
 26a:	80 e7       	ldi	r24, 0x70	; 112
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts>
		lcd_gotoxy(0, 1);  // Move cursor to the second row
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_gotoxy>

		// Reset password input
		index = 0;
 27a:	10 e0       	ldi	r17, 0x00	; 0

		// Get the password from the user
		while (index < PASSWORD_LENGTH) {
 27c:	11 c0       	rjmp	.+34     	; 0x2a0 <main+0x54>
			char key = keypad_get_key();
 27e:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_get_key>
			if (key != '\0') {  // A valid key was pressed
 282:	88 23       	and	r24, r24
 284:	69 f0       	breq	.+26     	; 0x2a0 <main+0x54>
				entered_password[index++] = key;  // Store the key
 286:	01 e0       	ldi	r16, 0x01	; 1
 288:	01 0f       	add	r16, r17
 28a:	e1 e0       	ldi	r30, 0x01	; 1
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 0f       	add	r30, r28
 290:	fd 1f       	adc	r31, r29
 292:	e1 0f       	add	r30, r17
 294:	f1 1d       	adc	r31, r1
 296:	80 83       	st	Z, r24
				lcd_putc('*');                    // Show asterisk for privacy
 298:	8a e2       	ldi	r24, 0x2A	; 42
 29a:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_putc>

		// Get the password from the user
		while (index < PASSWORD_LENGTH) {
			char key = keypad_get_key();
			if (key != '\0') {  // A valid key was pressed
				entered_password[index++] = key;  // Store the key
 29e:	10 2f       	mov	r17, r16

		// Reset password input
		index = 0;

		// Get the password from the user
		while (index < PASSWORD_LENGTH) {
 2a0:	14 30       	cpi	r17, 0x04	; 4
 2a2:	68 f3       	brcs	.-38     	; 0x27e <main+0x32>
			if (key != '\0') {  // A valid key was pressed
				entered_password[index++] = key;  // Store the key
				lcd_putc('*');                    // Show asterisk for privacy
			}
		}
		entered_password[index] = '\0';  // Null-terminate the string
 2a4:	e1 e0       	ldi	r30, 0x01	; 1
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	e1 0f       	add	r30, r17
 2ae:	f1 1d       	adc	r31, r1
 2b0:	10 82       	st	Z, r1
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	84 e3       	ldi	r24, 0x34	; 52
 2b6:	9c e0       	ldi	r25, 0x0C	; 12
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <main+0x6c>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x76>
 2c2:	00 00       	nop

		_delay_ms(500);
		lcd_clrscr();
 2c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>

		// Check if the entered password matches the correct one
		if (strcmp(entered_password, correct_password) == 0) {
 2c8:	6f e9       	ldi	r22, 0x9F	; 159
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 92 01 	call	0x324	; 0x324 <strcmp>
 2d4:	89 2b       	or	r24, r25
 2d6:	69 f4       	brne	.+26     	; 0x2f2 <main+0xa6>
			lcd_puts("Access Granted!");
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts>
			PORTD |= (1 << BLUE_LED);  // Turn on blue LED
 2e0:	82 b3       	in	r24, 0x12	; 18
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1 << RED_LED);  // Turn off red LED
 2e6:	82 b3       	in	r24, 0x12	; 18
 2e8:	8f 77       	andi	r24, 0x7F	; 127
 2ea:	82 bb       	out	0x12, r24	; 18
			motor_open();              // Open the motor
 2ec:	0e 94 18 01 	call	0x230	; 0x230 <motor_open>
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <main+0xbe>
			} else {
			lcd_puts("Access Denied!");
 2f2:	80 e9       	ldi	r24, 0x90	; 144
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts>
			PORTD |= (1 << RED_LED);   // Turn on red LED
 2fa:	82 b3       	in	r24, 0x12	; 18
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~(1 << BLUE_LED); // Turn off blue LED
 300:	82 b3       	in	r24, 0x12	; 18
 302:	8f 7b       	andi	r24, 0xBF	; 191
 304:	82 bb       	out	0x12, r24	; 18
			motor_stop();              // Keep motor closed
 306:	0e 94 22 01 	call	0x244	; 0x244 <motor_stop>
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	83 ed       	ldi	r24, 0xD3	; 211
 30e:	90 e3       	ldi	r25, 0x30	; 48
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0xc4>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0xce>
 31a:	00 00       	nop
		}

		_delay_ms(2000);  // Delay to allow user to read the message
		PORTD &= ~((1 << BLUE_LED) | (1 << RED_LED));  // Turn off LEDs
 31c:	82 b3       	in	r24, 0x12	; 18
 31e:	8f 73       	andi	r24, 0x3F	; 63
 320:	82 bb       	out	0x12, r24	; 18
	}
 322:	a1 cf       	rjmp	.-190    	; 0x266 <main+0x1a>

00000324 <strcmp>:
 324:	fb 01       	movw	r30, r22
 326:	dc 01       	movw	r26, r24
 328:	8d 91       	ld	r24, X+
 32a:	01 90       	ld	r0, Z+
 32c:	80 19       	sub	r24, r0
 32e:	01 10       	cpse	r0, r1
 330:	d9 f3       	breq	.-10     	; 0x328 <strcmp+0x4>
 332:	99 0b       	sbc	r25, r25
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
