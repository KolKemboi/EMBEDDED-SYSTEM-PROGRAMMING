
DigitalSafe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000368  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa0  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000926  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074e  00000000  00000000  00001dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000629  00000000  00000000  00002a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000030bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  7a:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
	{'7', '8', '9', 'C'},
	{'*', '0', '#', 'D'}
};

void keypad_init() {
	KEYPAD_DDR = 0xF0; // Upper nibble output, lower nibble input
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT = 0xFF; // Enable pull-ups
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret

0000008c <keypad_getkey>:
}

char keypad_getkey() {
	for (uint8_t row = 0; row < 4; row++) {
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	2c c0       	rjmp	.+88     	; 0xe8 <keypad_getkey+0x5c>
		KEYPAD_PORT = ~(1 << (row + 4)); // Set one row low
  90:	63 2f       	mov	r22, r19
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	ab 01       	movw	r20, r22
  96:	4c 5f       	subi	r20, 0xFC	; 252
  98:	5f 4f       	sbci	r21, 0xFF	; 255
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <keypad_getkey+0x18>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	4a 95       	dec	r20
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <keypad_getkey+0x14>
  a8:	80 95       	com	r24
  aa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	00 00       	nop
		_delay_us(1); // Small delay

		for (uint8_t col = 0; col < 4; col++) {
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	18 c0       	rjmp	.+48     	; 0xe2 <keypad_getkey+0x56>
			if (!(KEYPAD_PIN & (1 << col))) {
  b2:	80 b3       	in	r24, 0x10	; 16
  b4:	42 2f       	mov	r20, r18
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 2e       	mov	r0, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <keypad_getkey+0x36>
  be:	95 95       	asr	r25
  c0:	87 95       	ror	r24
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <keypad_getkey+0x32>
  c6:	80 fd       	sbrc	r24, 0
  c8:	0b c0       	rjmp	.+22     	; 0xe0 <keypad_getkey+0x54>
				return keys[row][col]; // Return pressed key
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	6c 59       	subi	r22, 0x9C	; 156
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	fb 01       	movw	r30, r22
  d8:	e4 0f       	add	r30, r20
  da:	f5 1f       	adc	r31, r21
  dc:	80 81       	ld	r24, Z
  de:	08 95       	ret
char keypad_getkey() {
	for (uint8_t row = 0; row < 4; row++) {
		KEYPAD_PORT = ~(1 << (row + 4)); // Set one row low
		_delay_us(1); // Small delay

		for (uint8_t col = 0; col < 4; col++) {
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	24 30       	cpi	r18, 0x04	; 4
  e4:	30 f3       	brcs	.-52     	; 0xb2 <keypad_getkey+0x26>
	KEYPAD_DDR = 0xF0; // Upper nibble output, lower nibble input
	KEYPAD_PORT = 0xFF; // Enable pull-ups
}

char keypad_getkey() {
	for (uint8_t row = 0; row < 4; row++) {
  e6:	3f 5f       	subi	r19, 0xFF	; 255
  e8:	34 30       	cpi	r19, 0x04	; 4
  ea:	90 f2       	brcs	.-92     	; 0x90 <keypad_getkey+0x4>
			if (!(KEYPAD_PIN & (1 << col))) {
				return keys[row][col]; // Return pressed key
			}
		}
	}
	return '\0'; // No key pressed
  ec:	80 e0       	ldi	r24, 0x00	; 0
}
  ee:	08 95       	ret

000000f0 <lcd_command>:
#include "lcd.h"

void lcd_command(unsigned char cmd) {
	LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0); // Send higher nibble
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	28 2f       	mov	r18, r24
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	92 2b       	or	r25, r18
  fa:	95 bb       	out	0x15, r25	; 21
	LCD_PORT &= ~(1 << RS); // RS = 0 for command
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	9e 7f       	andi	r25, 0xFE	; 254
 100:	95 bb       	out	0x15, r25	; 21
	LCD_PORT |= (1 << EN); // Enable pulse
 102:	95 b3       	in	r25, 0x15	; 21
 104:	92 60       	ori	r25, 0x02	; 2
 106:	95 bb       	out	0x15, r25	; 21
 108:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1 << EN);
 10a:	95 b3       	in	r25, 0x15	; 21
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	95 bb       	out	0x15, r25	; 21
 110:	32 e4       	ldi	r19, 0x42	; 66
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_command+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_command+0x28>
	_delay_us(200);

	LCD_PORT = (LCD_PORT & 0x0F) | (cmd << 4); // Send lower nibble
 118:	25 b3       	in	r18, 0x15	; 21
 11a:	30 e1       	ldi	r19, 0x10	; 16
 11c:	83 9f       	mul	r24, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	85 bb       	out	0x15, r24	; 21
	LCD_PORT |= (1 << EN); // Enable pulse
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 bb       	out	0x15, r24	; 21
 130:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1 << EN);
 132:	85 b3       	in	r24, 0x15	; 21
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_command+0x4c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_command+0x52>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <lcd_data>:
	_delay_ms(2);
}

void lcd_data(unsigned char data) {
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0); // Send higher nibble
 146:	95 b3       	in	r25, 0x15	; 21
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	28 2f       	mov	r18, r24
 14c:	20 7f       	andi	r18, 0xF0	; 240
 14e:	92 2b       	or	r25, r18
 150:	95 bb       	out	0x15, r25	; 21
	LCD_PORT |= (1 << RS); // RS = 1 for data
 152:	95 b3       	in	r25, 0x15	; 21
 154:	91 60       	ori	r25, 0x01	; 1
 156:	95 bb       	out	0x15, r25	; 21
	LCD_PORT |= (1 << EN); // Enable pulse
 158:	95 b3       	in	r25, 0x15	; 21
 15a:	92 60       	ori	r25, 0x02	; 2
 15c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1 << EN);
 160:	95 b3       	in	r25, 0x15	; 21
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	95 bb       	out	0x15, r25	; 21
 166:	32 e4       	ldi	r19, 0x42	; 66
 168:	3a 95       	dec	r19
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_data+0x22>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_data+0x28>
	_delay_us(200);

	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4); // Send lower nibble
 16e:	25 b3       	in	r18, 0x15	; 21
 170:	30 e1       	ldi	r19, 0x10	; 16
 172:	83 9f       	mul	r24, r19
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	92 2f       	mov	r25, r18
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	89 2b       	or	r24, r25
 17e:	85 bb       	out	0x15, r24	; 21
	LCD_PORT |= (1 << EN); // Enable pulse
 180:	85 b3       	in	r24, 0x15	; 21
 182:	82 60       	ori	r24, 0x02	; 2
 184:	85 bb       	out	0x15, r24	; 21
 186:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1 << EN);
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	83 ef       	ldi	r24, 0xF3	; 243
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_data+0x4c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_data+0x52>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <lcd_init>:
	_delay_ms(2);
}

void lcd_init(unsigned char disp_attr) {
	LCD_DDR = 0xFF; // Set LCD port as output
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	85 ea       	ldi	r24, 0xA5	; 165
 1a2:	9e e0       	ldi	r25, 0x0E	; 14
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x8>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_init+0xe>
 1aa:	00 00       	nop
	_delay_ms(15);
	lcd_command(0x02); // Initialize LCD in 4-bit mode
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
	lcd_command(0x28); // 2 lines, 5x7 matrix
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
	lcd_command(0x0C); // Display ON, Cursor OFF
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
	lcd_command(0x06); // Auto-increment cursor
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
	lcd_command(0x01); // Clear display
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
 1ca:	83 ef       	ldi	r24, 0xF3	; 243
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x32>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x38>
 1d4:	00 00       	nop
 1d6:	08 95       	ret

000001d8 <lcd_clrscr>:
	_delay_ms(2);
}

void lcd_clrscr() {
	lcd_command(0x01); // Clear display
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
 1de:	83 ef       	ldi	r24, 0xF3	; 243
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_clrscr+0xa>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_clrscr+0x10>
 1e8:	00 00       	nop
 1ea:	08 95       	ret

000001ec <lcd_puts>:
	_delay_ms(2);
}

void lcd_puts(const char *str) {
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
	while (*str) {
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <lcd_puts+0xe>
		lcd_data(*str++);
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_data>
	lcd_command(0x01); // Clear display
	_delay_ms(2);
}

void lcd_puts(const char *str) {
	while (*str) {
 1fa:	88 81       	ld	r24, Y
 1fc:	81 11       	cpse	r24, r1
 1fe:	fa cf       	rjmp	.-12     	; 0x1f4 <lcd_puts+0x8>
		lcd_data(*str++);
	}
}
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y) {
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <lcd_gotoxy+0x6>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
	unsigned char pos[] = {0x80, 0xC0};
 210:	90 e8       	ldi	r25, 0x80	; 128
 212:	99 83       	std	Y+1, r25	; 0x01
 214:	90 ec       	ldi	r25, 0xC0	; 192
 216:	9a 83       	std	Y+2, r25	; 0x02
	lcd_command(pos[y] + x);
 218:	e1 e0       	ldi	r30, 0x01	; 1
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ec 0f       	add	r30, r28
 21e:	fd 1f       	adc	r31, r29
 220:	e6 0f       	add	r30, r22
 222:	f1 1d       	adc	r31, r1
 224:	90 81       	ld	r25, Z
 226:	89 0f       	add	r24, r25
 228:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_command>
}
 22c:	0f 90       	pop	r0
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <lcd_putc>:

void lcd_putc(char c) {
	lcd_data(c);
 236:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_data>
 23a:	08 95       	ret

0000023c <unlockSafe>:
char correctPassword[4] = {'1', '2', '3', '4'};

// Function to control the motor
void unlockSafe() {
	// Set PB1 (OC1A) as output
	DDRB |= (1 << PB1);
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	87 bb       	out	0x17, r24	; 23

	// Configure Timer1 for PWM
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
 242:	8f b5       	in	r24, 0x2f	; 47
 244:	82 68       	ori	r24, 0x82	; 130
 246:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11); // Prescaler 8
 248:	8e b5       	in	r24, 0x2e	; 46
 24a:	8a 61       	ori	r24, 0x1A	; 26
 24c:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 19999; // Top value for 50 Hz (8 MHz / (8 * 50 Hz) - 1)
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	97 bd       	out	0x27, r25	; 39
 254:	86 bd       	out	0x26, r24	; 38

	OCR1A = 1500; // Duty cycle for "unlock" position
 256:	8c ed       	ldi	r24, 0xDC	; 220
 258:	95 e0       	ldi	r25, 0x05	; 5
 25a:	9b bd       	out	0x2b, r25	; 43
 25c:	8a bd       	out	0x2a, r24	; 42
 25e:	2f eb       	ldi	r18, 0xBF	; 191
 260:	87 e2       	ldi	r24, 0x27	; 39
 262:	99 e0       	ldi	r25, 0x09	; 9
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <unlockSafe+0x28>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <unlockSafe+0x32>
 26e:	00 00       	nop
	_delay_ms(3000);

	OCR1A = 1000; // Duty cycle for "lock" position
 270:	88 ee       	ldi	r24, 0xE8	; 232
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	9b bd       	out	0x2b, r25	; 43
 276:	8a bd       	out	0x2a, r24	; 42
 278:	2f e9       	ldi	r18, 0x9F	; 159
 27a:	86 e8       	ldi	r24, 0x86	; 134
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <unlockSafe+0x42>
 286:	00 c0       	rjmp	.+0      	; 0x288 <unlockSafe+0x4c>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <comparePasswords>:
	_delay_ms(500);
}

// Function to compare passwords
uint8_t comparePasswords(char *input) {
 28c:	bc 01       	movw	r22, r24
	for (uint8_t i = 0; i < 4; i++) {
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0d c0       	rjmp	.+26     	; 0x2ac <comparePasswords+0x20>
		if (input[i] != correctPassword[i]) {
 292:	29 2f       	mov	r18, r25
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	fb 01       	movw	r30, r22
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	40 81       	ld	r20, Z
 29e:	f9 01       	movw	r30, r18
 2a0:	e0 5a       	subi	r30, 0xA0	; 160
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	20 81       	ld	r18, Z
 2a6:	42 13       	cpse	r20, r18
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <comparePasswords+0x28>
	_delay_ms(500);
}

// Function to compare passwords
uint8_t comparePasswords(char *input) {
	for (uint8_t i = 0; i < 4; i++) {
 2aa:	9f 5f       	subi	r25, 0xFF	; 255
 2ac:	94 30       	cpi	r25, 0x04	; 4
 2ae:	88 f3       	brcs	.-30     	; 0x292 <comparePasswords+0x6>
		if (input[i] != correctPassword[i]) {
			return 0; // Passwords do not match
		}
	}
	return 1; // Passwords match
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret

// Function to compare passwords
uint8_t comparePasswords(char *input) {
	for (uint8_t i = 0; i < 4; i++) {
		if (input[i] != correctPassword[i]) {
			return 0; // Passwords do not match
 2b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1; // Passwords match
}
 2b6:	08 95       	ret

000002b8 <main>:

int main() {
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	00 d0       	rcall	.+0      	; 0x2be <main+0x6>
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <main+0x8>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	char enteredPassword[4];
	uint8_t index = 0;
	char key;

	// Initialize LCD and Keypad
	lcd_init(LCD_DISP_ON);
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>
	keypad_init();
 2ca:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>

	// Display initial message
	lcd_clrscr();
 2ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clrscr>
	lcd_puts("Enter Password:");
 2d2:	84 e7       	ldi	r24, 0x74	; 116
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_puts>
		}
	}
	return 1; // Passwords match
}

int main() {
 2da:	00 e0       	ldi	r16, 0x00	; 0
	lcd_clrscr();
	lcd_puts("Enter Password:");

	while (1) {
		// Wait for a key press
		key = keypad_getkey();
 2dc:	0e 94 46 00 	call	0x8c	; 0x8c <keypad_getkey>
 2e0:	18 2f       	mov	r17, r24

		if (key != '\0') {
 2e2:	88 23       	and	r24, r24
 2e4:	d9 f3       	breq	.-10     	; 0x2dc <main+0x24>
			// Display the key as '*'
			lcd_gotoxy(index, 1);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	80 2f       	mov	r24, r16
 2ea:	0e 94 03 01 	call	0x206	; 0x206 <lcd_gotoxy>
			lcd_putc('*');
 2ee:	8a e2       	ldi	r24, 0x2A	; 42
 2f0:	0e 94 1b 01 	call	0x236	; 0x236 <lcd_putc>
			enteredPassword[index] = key;  // Store the entered key
 2f4:	e1 e0       	ldi	r30, 0x01	; 1
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ec 0f       	add	r30, r28
 2fa:	fd 1f       	adc	r31, r29
 2fc:	e0 0f       	add	r30, r16
 2fe:	f1 1d       	adc	r31, r1
 300:	10 83       	st	Z, r17
			index++;  // Move to the next position for entering password
 302:	0f 5f       	subi	r16, 0xFF	; 255

			// Check if 4 digits have been entered
			if (index == 4) {
 304:	04 30       	cpi	r16, 0x04	; 4
 306:	51 f7       	brne	.-44     	; 0x2dc <main+0x24>
				index = 0;  // Reset index for the next input

				// Compare the entered password
				if (comparePasswords(enteredPassword)) {
 308:	ce 01       	movw	r24, r28
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	0e 94 46 01 	call	0x28c	; 0x28c <comparePasswords>
 310:	88 23       	and	r24, r24
 312:	91 f0       	breq	.+36     	; 0x338 <main+0x80>
					lcd_clrscr();
 314:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clrscr>
					lcd_puts("Access Granted");
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_puts>
					unlockSafe(); // Unlock the safe by moving the motor
 320:	0e 94 1e 01 	call	0x23c	; 0x23c <unlockSafe>
 324:	2f e7       	ldi	r18, 0x7F	; 127
 326:	8a e1       	ldi	r24, 0x1A	; 26
 328:	96 e0       	ldi	r25, 0x06	; 6
 32a:	21 50       	subi	r18, 0x01	; 1
 32c:	80 40       	sbci	r24, 0x00	; 0
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	e1 f7       	brne	.-8      	; 0x32a <main+0x72>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0x7c>
 334:	00 00       	nop
 336:	0f c0       	rjmp	.+30     	; 0x356 <main+0x9e>
					_delay_ms(2000); // Delay to keep "Access Granted" on screen for a while
					} else {
					lcd_clrscr();
 338:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clrscr>
					lcd_puts("Wrong Password");
 33c:	83 e9       	ldi	r24, 0x93	; 147
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_puts>
 344:	2f e7       	ldi	r18, 0x7F	; 127
 346:	8a e1       	ldi	r24, 0x1A	; 26
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x92>
 352:	00 c0       	rjmp	.+0      	; 0x354 <main+0x9c>
 354:	00 00       	nop
					_delay_ms(2000); // Delay to show "Wrong Password"
				}

				// Reset the display after showing the result
				lcd_clrscr();
 356:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clrscr>
				lcd_puts("Enter Password:");
 35a:	84 e7       	ldi	r24, 0x74	; 116
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_puts>
 362:	bb cf       	rjmp	.-138    	; 0x2da <main+0x22>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
